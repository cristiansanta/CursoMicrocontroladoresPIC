CCS PCM C Compiler, Version 5.076, 56587               18-Sep-21 23:14

               Filename:   C:\Users\CRISTRONICOS\Documents\1PROGRAMACIÓN-ELECTRÓNICA\2.uC PIC\LEARNING\9.Medir Velocidad RPM_ Motor Encoder\9.Medir Velocidad RPM_ Motor Encoder.lst

               ROM used:   1336 words (16%)
                           Largest free fragment is 2048
               RAM used:   31 (8%) at main() level
                           55 (15%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   439
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #INCLUDE <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
0056:  DATA D6,22
0057:  DATA CC,27
0058:  DATA C3,24
0059:  DATA C4,20
005A:  DATA 44,10
005B:  DATA CD,27
005C:  DATA D4,27
005D:  DATA 52,00
005E:  DATA 52,28
005F:  DATA 4D,1D
0060:  DATA A0,12
0061:  DATA 66,10
0062:  DATA 20,00
*
0146:  MOVF   0B,W
0147:  MOVWF  38
0148:  BCF    0B.7
0149:  BSF    03.5
014A:  BSF    03.6
014B:  BSF    0C.7
014C:  BSF    0C.0
014D:  NOP
014E:  NOP
014F:  BCF    03.5
0150:  BCF    03.6
0151:  BTFSC  38.7
0152:  BSF    0B.7
0153:  BSF    03.6
0154:  MOVF   0C,W
0155:  ANDLW  7F
0156:  BTFSC  03.2
0157:  GOTO   19A
0158:  BCF    03.6
0159:  MOVWF  38
015A:  BSF    03.6
015B:  MOVF   0D,W
015C:  BCF    03.6
015D:  MOVWF  39
015E:  BSF    03.6
015F:  MOVF   0F,W
0160:  BCF    03.6
0161:  MOVWF  3A
0162:  MOVF   38,W
0163:  MOVWF  45
0164:  CALL   11A
0165:  MOVF   39,W
0166:  BSF    03.6
0167:  MOVWF  0D
0168:  BCF    03.6
0169:  MOVF   3A,W
016A:  BSF    03.6
016B:  MOVWF  0F
016C:  BCF    03.6
016D:  MOVF   0B,W
016E:  MOVWF  3B
016F:  BCF    0B.7
0170:  BSF    03.5
0171:  BSF    03.6
0172:  BSF    0C.7
0173:  BSF    0C.0
0174:  NOP
0175:  NOP
0176:  BCF    03.5
0177:  BCF    03.6
0178:  BTFSC  3B.7
0179:  BSF    0B.7
017A:  BSF    03.6
017B:  RLF    0C,W
017C:  RLF    0E,W
017D:  ANDLW  7F
017E:  BTFSC  03.2
017F:  GOTO   19A
0180:  BCF    03.6
0181:  MOVWF  38
0182:  BSF    03.6
0183:  MOVF   0D,W
0184:  BCF    03.6
0185:  MOVWF  39
0186:  BSF    03.6
0187:  MOVF   0F,W
0188:  BCF    03.6
0189:  MOVWF  3A
018A:  MOVF   38,W
018B:  MOVWF  45
018C:  CALL   11A
018D:  MOVF   39,W
018E:  BSF    03.6
018F:  MOVWF  0D
0190:  BCF    03.6
0191:  MOVF   3A,W
0192:  BSF    03.6
0193:  MOVWF  0F
0194:  INCF   0D,F
0195:  BTFSC  03.2
0196:  INCF   0F,F
0197:  BCF    03.6
0198:  GOTO   146
0199:  BSF    03.6
019A:  BCF    03.6
019B:  BCF    0A.3
019C:  BCF    0A.4
019D:  GOTO   4AB (RETURN)
019E:  MOVLW  10
019F:  MOVWF  3C
01A0:  CLRF   77
01A1:  CLRF   7A
01A2:  RRF    39,F
01A3:  RRF    38,F
01A4:  BTFSS  03.0
01A5:  GOTO   1AC
01A6:  MOVF   3A,W
01A7:  ADDWF  77,F
01A8:  BTFSC  03.0
01A9:  INCF   7A,F
01AA:  MOVF   3B,W
01AB:  ADDWF  7A,F
01AC:  RRF    7A,F
01AD:  RRF    77,F
01AE:  RRF    79,F
01AF:  RRF    78,F
01B0:  DECFSZ 3C,F
01B1:  GOTO   1A2
01B2:  BCF    0A.3
01B3:  BCF    0A.4
01B4:  GOTO   4E0 (RETURN)
01B5:  CLRF   78
01B6:  CLRF   79
01B7:  CLRF   77
01B8:  CLRF   7A
01B9:  MOVF   3D,W
01BA:  BTFSS  03.2
01BB:  GOTO   1BF
01BC:  MOVF   3C,W
01BD:  BTFSC  03.2
01BE:  GOTO   1D9
01BF:  MOVLW  10
01C0:  MOVWF  3E
01C1:  BCF    03.0
01C2:  RLF    3A,F
01C3:  RLF    3B,F
01C4:  RLF    77,F
01C5:  RLF    7A,F
01C6:  MOVF   3D,W
01C7:  SUBWF  7A,W
01C8:  BTFSS  03.2
01C9:  GOTO   1CC
01CA:  MOVF   3C,W
01CB:  SUBWF  77,W
01CC:  BTFSS  03.0
01CD:  GOTO   1D5
01CE:  MOVF   3C,W
01CF:  SUBWF  77,F
01D0:  BTFSS  03.0
01D1:  DECF   7A,F
01D2:  MOVF   3D,W
01D3:  SUBWF  7A,F
01D4:  BSF    03.0
01D5:  RLF    78,F
01D6:  RLF    79,F
01D7:  DECFSZ 3E,F
01D8:  GOTO   1C1
01D9:  BCF    0A.3
01DA:  BCF    0A.4
01DB:  GOTO   4EC (RETURN)
01DC:  MOVLW  8E
01DD:  MOVWF  77
01DE:  MOVF   39,W
01DF:  MOVWF  78
01E0:  MOVF   38,W
01E1:  MOVWF  79
01E2:  CLRF   7A
01E3:  MOVF   78,F
01E4:  BTFSS  03.2
01E5:  GOTO   1F0
01E6:  MOVF   79,W
01E7:  MOVWF  78
01E8:  CLRF   79
01E9:  MOVLW  08
01EA:  SUBWF  77,F
01EB:  MOVF   78,F
01EC:  BTFSS  03.2
01ED:  GOTO   1F0
01EE:  CLRF   77
01EF:  GOTO   1F8
01F0:  BCF    03.0
01F1:  BTFSC  78.7
01F2:  GOTO   1F7
01F3:  RLF    79,F
01F4:  RLF    78,F
01F5:  DECF   77,F
01F6:  GOTO   1F0
01F7:  BCF    78.7
01F8:  BCF    0A.3
01F9:  BCF    0A.4
01FA:  GOTO   4F3 (RETURN)
01FB:  MOVF   0B,W
01FC:  MOVWF  39
01FD:  BCF    0B.7
01FE:  BSF    03.5
01FF:  BSF    03.6
0200:  BSF    0C.7
0201:  BSF    0C.0
0202:  NOP
0203:  NOP
0204:  BCF    03.5
0205:  BCF    03.6
0206:  BTFSC  39.7
0207:  BSF    0B.7
0208:  BTFSC  03.0
0209:  GOTO   232
020A:  BSF    03.6
020B:  MOVF   0C,W
020C:  ANDLW  7F
020D:  BCF    03.6
020E:  MOVWF  39
020F:  BSF    03.6
0210:  MOVF   0D,W
0211:  BCF    03.6
0212:  MOVWF  3A
0213:  BSF    03.6
0214:  MOVF   0F,W
0215:  BCF    03.6
0216:  MOVWF  3B
0217:  MOVF   39,W
0218:  MOVWF  45
0219:  CALL   11A
021A:  MOVF   3A,W
021B:  BSF    03.6
021C:  MOVWF  0D
021D:  BCF    03.6
021E:  MOVF   3B,W
021F:  BSF    03.6
0220:  MOVWF  0F
0221:  BCF    03.6
0222:  MOVF   0B,W
0223:  MOVWF  3C
0224:  BCF    0B.7
0225:  BSF    03.5
0226:  BSF    03.6
0227:  BSF    0C.7
0228:  BSF    0C.0
0229:  NOP
022A:  NOP
022B:  BCF    03.5
022C:  BCF    03.6
022D:  BTFSC  3C.7
022E:  BSF    0B.7
022F:  DECFSZ 38,F
0230:  GOTO   232
0231:  GOTO   251
0232:  BSF    03.6
0233:  RLF    0C,W
0234:  RLF    0E,W
0235:  ANDLW  7F
0236:  BCF    03.6
0237:  MOVWF  39
0238:  BSF    03.6
0239:  MOVF   0D,W
023A:  BCF    03.6
023B:  MOVWF  3A
023C:  BSF    03.6
023D:  MOVF   0F,W
023E:  BCF    03.6
023F:  MOVWF  3B
0240:  MOVF   39,W
0241:  MOVWF  45
0242:  CALL   11A
0243:  MOVF   3A,W
0244:  BSF    03.6
0245:  MOVWF  0D
0246:  BCF    03.6
0247:  MOVF   3B,W
0248:  BSF    03.6
0249:  MOVWF  0F
024A:  INCF   0D,F
024B:  BTFSC  03.2
024C:  INCF   0F,F
024D:  BCF    03.0
024E:  BCF    03.6
024F:  DECFSZ 38,F
0250:  GOTO   1FB
0251:  BCF    0A.3
0252:  BCF    0A.4
0253:  GOTO   50C (RETURN)
0254:  BTFSC  03.1
0255:  GOTO   259
0256:  MOVLW  4D
0257:  MOVWF  04
0258:  BCF    03.7
0259:  CLRF   77
025A:  CLRF   78
025B:  CLRF   79
025C:  CLRF   7A
025D:  CLRF   4D
025E:  CLRF   4E
025F:  CLRF   4F
0260:  CLRF   50
0261:  MOVF   4C,W
0262:  IORWF  4B,W
0263:  IORWF  4A,W
0264:  IORWF  49,W
0265:  BTFSC  03.2
0266:  GOTO   297
0267:  MOVLW  20
0268:  MOVWF  51
0269:  BCF    03.0
026A:  RLF    45,F
026B:  RLF    46,F
026C:  RLF    47,F
026D:  RLF    48,F
026E:  RLF    4D,F
026F:  RLF    4E,F
0270:  RLF    4F,F
0271:  RLF    50,F
0272:  MOVF   4C,W
0273:  SUBWF  50,W
0274:  BTFSS  03.2
0275:  GOTO   280
0276:  MOVF   4B,W
0277:  SUBWF  4F,W
0278:  BTFSS  03.2
0279:  GOTO   280
027A:  MOVF   4A,W
027B:  SUBWF  4E,W
027C:  BTFSS  03.2
027D:  GOTO   280
027E:  MOVF   49,W
027F:  SUBWF  4D,W
0280:  BTFSS  03.0
0281:  GOTO   291
0282:  MOVF   49,W
0283:  SUBWF  4D,F
0284:  MOVF   4A,W
0285:  BTFSS  03.0
0286:  INCFSZ 4A,W
0287:  SUBWF  4E,F
0288:  MOVF   4B,W
0289:  BTFSS  03.0
028A:  INCFSZ 4B,W
028B:  SUBWF  4F,F
028C:  MOVF   4C,W
028D:  BTFSS  03.0
028E:  INCFSZ 4C,W
028F:  SUBWF  50,F
0290:  BSF    03.0
0291:  RLF    77,F
0292:  RLF    78,F
0293:  RLF    79,F
0294:  RLF    7A,F
0295:  DECFSZ 51,F
0296:  GOTO   269
0297:  MOVF   4D,W
0298:  MOVWF  00
0299:  INCF   04,F
029A:  MOVF   4E,W
029B:  MOVWF  00
029C:  INCF   04,F
029D:  MOVF   4F,W
029E:  MOVWF  00
029F:  INCF   04,F
02A0:  MOVF   50,W
02A1:  MOVWF  00
02A2:  RETURN
02A3:  MOVF   04,W
02A4:  MOVWF  3D
02A5:  MOVF   3C,W
02A6:  MOVWF  3F
02A7:  BTFSC  03.2
02A8:  GOTO   335
02A9:  MOVF   3B,W
02AA:  MOVWF  48
02AB:  MOVF   3A,W
02AC:  MOVWF  47
02AD:  MOVF   39,W
02AE:  MOVWF  46
02AF:  MOVF   38,W
02B0:  MOVWF  45
02B1:  CLRF   4C
02B2:  CLRF   4B
02B3:  MOVLW  20
02B4:  MOVWF  4A
02B5:  MOVLW  82
02B6:  MOVWF  49
02B7:  MOVF   45,W
02B8:  BTFSC  03.2
02B9:  GOTO   327
02BA:  MOVWF  4D
02BB:  MOVF   49,W
02BC:  BTFSC  03.2
02BD:  GOTO   327
02BE:  ADDWF  4D,F
02BF:  BTFSC  03.0
02C0:  GOTO   2C8
02C1:  MOVLW  7F
02C2:  SUBWF  4D,F
02C3:  BTFSS  03.0
02C4:  GOTO   327
02C5:  BTFSC  03.2
02C6:  GOTO   327
02C7:  GOTO   2CC
02C8:  MOVLW  81
02C9:  ADDWF  4D,F
02CA:  BTFSC  03.0
02CB:  GOTO   327
02CC:  MOVF   4D,W
02CD:  MOVWF  77
02CE:  CLRF   78
02CF:  CLRF   79
02D0:  CLRF   7A
02D1:  MOVF   46,W
02D2:  MOVWF  51
02D3:  BSF    51.7
02D4:  MOVF   47,W
02D5:  MOVWF  50
02D6:  MOVF   48,W
02D7:  MOVWF  4F
02D8:  MOVLW  18
02D9:  MOVWF  4D
02DA:  CLRF   4E
02DB:  BTFSS  4F.0
02DC:  GOTO   2F5
02DD:  MOVF   4C,W
02DE:  ADDWF  7A,F
02DF:  BTFSS  03.0
02E0:  GOTO   2E7
02E1:  INCF   79,F
02E2:  BTFSS  03.2
02E3:  GOTO   2E7
02E4:  INCF   78,F
02E5:  BTFSC  03.2
02E6:  BSF    4E.7
02E7:  MOVF   4B,W
02E8:  ADDWF  79,F
02E9:  BTFSS  03.0
02EA:  GOTO   2EE
02EB:  INCF   78,F
02EC:  BTFSC  03.2
02ED:  BSF    4E.7
02EE:  MOVF   4A,W
02EF:  MOVWF  47
02F0:  BSF    47.7
02F1:  MOVF   47,W
02F2:  ADDWF  78,F
02F3:  BTFSC  03.0
02F4:  BSF    4E.7
02F5:  RLF    4E,F
02F6:  RRF    78,F
02F7:  RRF    79,F
02F8:  RRF    7A,F
02F9:  RRF    51,F
02FA:  RRF    50,F
02FB:  RRF    4F,F
02FC:  BCF    03.0
02FD:  DECFSZ 4D,F
02FE:  GOTO   2DA
02FF:  MOVLW  01
0300:  ADDWF  77,F
0301:  BTFSC  03.0
0302:  GOTO   327
0303:  BTFSC  78.7
0304:  GOTO   30C
0305:  RLF    51,F
0306:  RLF    7A,F
0307:  RLF    79,F
0308:  RLF    78,F
0309:  DECF   77,F
030A:  BTFSC  03.2
030B:  GOTO   327
030C:  BTFSS  51.7
030D:  GOTO   31D
030E:  INCF   7A,F
030F:  BTFSS  03.2
0310:  GOTO   31D
0311:  INCF   79,F
0312:  BTFSS  03.2
0313:  GOTO   31D
0314:  INCF   78,F
0315:  BTFSS  03.2
0316:  GOTO   31D
0317:  RRF    78,F
0318:  RRF    79,F
0319:  RRF    7A,F
031A:  INCF   77,F
031B:  BTFSC  03.2
031C:  GOTO   327
031D:  MOVF   46,W
031E:  MOVWF  4E
031F:  MOVF   4A,W
0320:  XORWF  4E,F
0321:  BTFSS  4E.7
0322:  GOTO   325
0323:  BSF    78.7
0324:  GOTO   32B
0325:  BCF    78.7
0326:  GOTO   32B
0327:  CLRF   77
0328:  CLRF   78
0329:  CLRF   79
032A:  CLRF   7A
032B:  MOVF   7A,W
032C:  MOVWF  3B
032D:  MOVF   79,W
032E:  MOVWF  3A
032F:  MOVF   78,W
0330:  MOVWF  39
0331:  MOVF   77,W
0332:  MOVWF  38
0333:  DECFSZ 3F,F
0334:  GOTO   2A9
0335:  MOVF   3B,W
0336:  MOVWF  48
0337:  MOVF   3A,W
0338:  MOVWF  47
0339:  MOVF   39,W
033A:  MOVWF  46
033B:  MOVF   38,W
033C:  MOVWF  45
033D:  MOVF   45,W
033E:  SUBLW  B6
033F:  MOVWF  45
0340:  CLRF   7A
0341:  MOVF   46,W
0342:  MOVWF  49
0343:  BSF    46.7
0344:  BCF    03.0
0345:  RRF    46,F
0346:  RRF    47,F
0347:  RRF    48,F
0348:  RRF    7A,F
0349:  RRF    79,F
034A:  RRF    78,F
034B:  RRF    77,F
034C:  DECFSZ 45,F
034D:  GOTO   344
034E:  BTFSS  49.7
034F:  GOTO   35B
0350:  COMF   77,F
0351:  COMF   78,F
0352:  COMF   79,F
0353:  COMF   7A,F
0354:  INCF   77,F
0355:  BTFSC  03.2
0356:  INCF   78,F
0357:  BTFSC  03.2
0358:  INCF   79,F
0359:  BTFSC  03.2
035A:  INCF   7A,F
035B:  MOVF   7A,W
035C:  MOVWF  3B
035D:  MOVF   79,W
035E:  MOVWF  3A
035F:  MOVF   78,W
0360:  MOVWF  39
0361:  MOVF   77,W
0362:  MOVWF  38
0363:  BTFSS  3B.7
0364:  GOTO   372
0365:  DECF   3D,F
0366:  BSF    3D.5
0367:  COMF   38,F
0368:  COMF   39,F
0369:  COMF   3A,F
036A:  COMF   3B,F
036B:  INCF   38,F
036C:  BTFSC  03.2
036D:  INCF   39,F
036E:  BTFSC  03.2
036F:  INCF   3A,F
0370:  BTFSC  03.2
0371:  INCF   3B,F
0372:  MOVLW  3B
0373:  MOVWF  44
0374:  MOVLW  9A
0375:  MOVWF  43
0376:  MOVLW  CA
0377:  MOVWF  42
0378:  CLRF   41
0379:  MOVLW  0A
037A:  MOVWF  3F
037B:  MOVF   3C,W
037C:  BTFSC  03.2
037D:  INCF   3D,F
037E:  BSF    03.1
037F:  MOVLW  38
0380:  MOVWF  04
0381:  BCF    03.7
0382:  MOVF   3B,W
0383:  MOVWF  48
0384:  MOVF   3A,W
0385:  MOVWF  47
0386:  MOVF   39,W
0387:  MOVWF  46
0388:  MOVF   38,W
0389:  MOVWF  45
038A:  MOVF   44,W
038B:  MOVWF  4C
038C:  MOVF   43,W
038D:  MOVWF  4B
038E:  MOVF   42,W
038F:  MOVWF  4A
0390:  MOVF   41,W
0391:  MOVWF  49
0392:  CALL   254
0393:  MOVF   78,W
0394:  MOVF   77,F
0395:  BTFSS  03.2
0396:  GOTO   3AA
0397:  INCF   3C,W
0398:  SUBWF  3F,W
0399:  BTFSC  03.2
039A:  GOTO   3AA
039B:  MOVF   3D,W
039C:  BTFSC  03.2
039D:  GOTO   3AC
039E:  ANDLW  0F
039F:  SUBWF  3F,W
03A0:  BTFSC  03.2
03A1:  GOTO   3A4
03A2:  BTFSC  03.0
03A3:  GOTO   3DC
03A4:  BTFSC  3D.7
03A5:  GOTO   3DC
03A6:  BTFSC  3D.6
03A7:  GOTO   3AC
03A8:  MOVLW  20
03A9:  GOTO   3D8
03AA:  MOVLW  20
03AB:  ANDWF  3D,F
03AC:  BTFSS  3D.5
03AD:  GOTO   3BA
03AE:  BCF    3D.5
03AF:  MOVF   3C,W
03B0:  BTFSS  03.2
03B1:  DECF   3D,F
03B2:  MOVF   77,W
03B3:  MOVWF  3D
03B4:  MOVLW  2D
03B5:  MOVWF  45
03B6:  CALL   11A
03B7:  MOVF   3D,W
03B8:  MOVWF  77
03B9:  CLRF   3D
03BA:  MOVF   3C,W
03BB:  SUBWF  3F,W
03BC:  BTFSS  03.2
03BD:  GOTO   3C8
03BE:  MOVF   77,W
03BF:  MOVWF  3D
03C0:  MOVLW  2E
03C1:  MOVWF  45
03C2:  CALL   11A
03C3:  MOVF   3D,W
03C4:  MOVWF  77
03C5:  MOVLW  20
03C6:  ANDWF  3D,F
03C7:  MOVLW  00
03C8:  MOVLW  30
03C9:  BTFSS  3D.5
03CA:  GOTO   3D8
03CB:  BCF    3D.5
03CC:  MOVF   3C,W
03CD:  BTFSS  03.2
03CE:  DECF   3D,F
03CF:  MOVF   77,W
03D0:  MOVWF  3D
03D1:  MOVLW  2D
03D2:  MOVWF  45
03D3:  CALL   11A
03D4:  MOVF   3D,W
03D5:  MOVWF  77
03D6:  CLRF   3D
03D7:  MOVLW  30
03D8:  ADDWF  77,F
03D9:  MOVF   77,W
03DA:  MOVWF  45
03DB:  CALL   11A
03DC:  BCF    03.1
03DD:  MOVF   44,W
03DE:  MOVWF  48
03DF:  MOVF   43,W
03E0:  MOVWF  47
03E1:  MOVF   42,W
03E2:  MOVWF  46
03E3:  MOVF   41,W
03E4:  MOVWF  45
03E5:  CLRF   4C
03E6:  CLRF   4B
03E7:  CLRF   4A
03E8:  MOVLW  0A
03E9:  MOVWF  49
03EA:  CALL   254
03EB:  MOVF   7A,W
03EC:  MOVWF  44
03ED:  MOVF   79,W
03EE:  MOVWF  43
03EF:  MOVF   78,W
03F0:  MOVWF  42
03F1:  MOVF   77,W
03F2:  MOVWF  41
03F3:  DECFSZ 3F,F
03F4:  GOTO   37E
03F5:  BCF    0A.3
03F6:  BCF    0A.4
03F7:  GOTO   519 (RETURN)
03F8:  MOVF   39,W
03F9:  MOVWF  40
03FA:  MOVF   3D,W
03FB:  XORWF  40,F
03FC:  BTFSS  40.7
03FD:  GOTO   403
03FE:  BCF    03.2
03FF:  BCF    03.0
0400:  BTFSC  39.7
0401:  BSF    03.0
0402:  GOTO   436
0403:  MOVF   39,W
0404:  MOVWF  40
0405:  MOVF   3C,W
0406:  MOVWF  41
0407:  MOVF   38,W
0408:  SUBWF  41,F
0409:  BTFSC  03.2
040A:  GOTO   411
040B:  BTFSS  40.7
040C:  GOTO   436
040D:  MOVF   03,W
040E:  XORLW  01
040F:  MOVWF  03
0410:  GOTO   436
0411:  MOVF   3D,W
0412:  MOVWF  41
0413:  MOVF   39,W
0414:  SUBWF  41,F
0415:  BTFSC  03.2
0416:  GOTO   41D
0417:  BTFSS  40.7
0418:  GOTO   436
0419:  MOVF   03,W
041A:  XORLW  01
041B:  MOVWF  03
041C:  GOTO   436
041D:  MOVF   3E,W
041E:  MOVWF  41
041F:  MOVF   3A,W
0420:  SUBWF  41,F
0421:  BTFSC  03.2
0422:  GOTO   429
0423:  BTFSS  40.7
0424:  GOTO   436
0425:  MOVF   03,W
0426:  XORLW  01
0427:  MOVWF  03
0428:  GOTO   436
0429:  MOVF   3F,W
042A:  MOVWF  41
042B:  MOVF   3B,W
042C:  SUBWF  41,F
042D:  BTFSC  03.2
042E:  GOTO   435
042F:  BTFSS  40.7
0430:  GOTO   436
0431:  MOVF   03,W
0432:  XORLW  01
0433:  MOVWF  03
0434:  GOTO   436
0435:  BCF    03.0
0436:  BCF    0A.3
0437:  BCF    0A.4
0438:  GOTO   52E (RETURN)
....................  
.................... #list 
....................  
.................... #DEVICE ADC=10 
.................... #USE DELAY(CLOCK=4000000) 
*
0063:  MOVLW  46
0064:  MOVWF  04
0065:  BCF    03.7
0066:  MOVF   00,W
0067:  BTFSC  03.2
0068:  GOTO   077
0069:  MOVLW  01
006A:  MOVWF  78
006B:  CLRF   77
006C:  DECFSZ 77,F
006D:  GOTO   06C
006E:  DECFSZ 78,F
006F:  GOTO   06B
0070:  MOVLW  4A
0071:  MOVWF  77
0072:  DECFSZ 77,F
0073:  GOTO   072
0074:  GOTO   075
0075:  DECFSZ 00,F
0076:  GOTO   069
0077:  RETURN
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
.................... #USE RS232(UART1,baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #INCLUDE <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0090:  MOVLW  0F
0091:  BSF    03.5
0092:  ANDWF  08,W
0093:  IORLW  F0
0094:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0095:  BCF    03.5
0096:  BSF    08.2
....................    delay_cycles(1); 
0097:  NOP
....................    lcd_output_enable(1); 
0098:  BSF    08.0
....................    delay_cycles(1); 
0099:  NOP
....................    high = lcd_read_nibble(); 
009A:  CALL   084
009B:  MOVF   78,W
009C:  MOVWF  4D
....................        
....................    lcd_output_enable(0); 
009D:  BCF    08.0
....................    delay_cycles(1); 
009E:  NOP
....................    lcd_output_enable(1); 
009F:  BSF    08.0
....................    delay_us(1); 
00A0:  NOP
....................    low = lcd_read_nibble(); 
00A1:  CALL   084
00A2:  MOVF   78,W
00A3:  MOVWF  4C
....................        
....................    lcd_output_enable(0); 
00A4:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A5:  MOVLW  0F
00A6:  BSF    03.5
00A7:  ANDWF  08,W
00A8:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00A9:  BCF    03.5
00AA:  SWAPF  4D,W
00AB:  MOVWF  77
00AC:  MOVLW  F0
00AD:  ANDWF  77,F
00AE:  MOVF   77,W
00AF:  IORWF  4C,W
00B0:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0084:  MOVF   08,W
0085:  MOVWF  77
0086:  SWAPF  08,W
0087:  ANDLW  0F
0088:  MOVWF  78
....................   #endif 
0089:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0078:  SWAPF  4D,W
0079:  ANDLW  F0
007A:  MOVWF  77
007B:  MOVLW  0F
007C:  ANDWF  08,W
007D:  IORWF  77,W
007E:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
007F:  NOP
....................    lcd_output_enable(1); 
0080:  BSF    08.0
....................    delay_us(2); 
0081:  GOTO   082
....................    lcd_output_enable(0); 
0082:  BCF    08.0
0083:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008A:  BSF    03.5
008B:  BCF    08.0
....................    lcd_rs_tris(); 
008C:  BCF    08.1
....................    lcd_rw_tris(); 
008D:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008E:  BCF    03.5
008F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B1:  MOVF   78,W
00B2:  MOVWF  4C
00B3:  BTFSC  4C.7
00B4:  GOTO   090
....................    lcd_output_rs(address); 
00B5:  BTFSS  4A.0
00B6:  BCF    08.1
00B7:  BTFSC  4A.0
00B8:  BSF    08.1
....................    delay_cycles(1); 
00B9:  NOP
....................    lcd_output_rw(0); 
00BA:  BCF    08.2
....................    delay_cycles(1); 
00BB:  NOP
....................    lcd_output_enable(0); 
00BC:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00BD:  SWAPF  4B,W
00BE:  MOVWF  4C
00BF:  MOVLW  0F
00C0:  ANDWF  4C,F
00C1:  MOVF   4C,W
00C2:  MOVWF  4D
00C3:  CALL   078
....................    lcd_send_nibble(n & 0xf); 
00C4:  MOVF   4B,W
00C5:  ANDLW  0F
00C6:  MOVWF  4C
00C7:  MOVWF  4D
00C8:  CALL   078
00C9:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00CA:  MOVLW  28
00CB:  MOVWF  39
00CC:  MOVLW  0C
00CD:  MOVWF  3A
00CE:  MOVLW  01
00CF:  MOVWF  3B
00D0:  MOVLW  06
00D1:  MOVWF  3C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00D2:  BCF    08.0
....................    lcd_output_rs(0); 
00D3:  BCF    08.1
....................    lcd_output_rw(0); 
00D4:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00D5:  MOVLW  0F
00D6:  BSF    03.5
00D7:  ANDWF  08,W
00D8:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00D9:  BCF    08.0
....................    lcd_rs_tris(); 
00DA:  BCF    08.1
....................    lcd_rw_tris(); 
00DB:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00DC:  MOVLW  0F
00DD:  BCF    03.5
00DE:  MOVWF  46
00DF:  CALL   063
....................    for(i=1;i<=3;++i) 
00E0:  MOVLW  01
00E1:  MOVWF  38
00E2:  MOVF   38,W
00E3:  SUBLW  03
00E4:  BTFSS  03.0
00E5:  GOTO   0EE
....................    { 
....................        lcd_send_nibble(3); 
00E6:  MOVLW  03
00E7:  MOVWF  4D
00E8:  CALL   078
....................        delay_ms(5); 
00E9:  MOVLW  05
00EA:  MOVWF  46
00EB:  CALL   063
00EC:  INCF   38,F
00ED:  GOTO   0E2
....................    } 
....................     
....................    lcd_send_nibble(2); 
00EE:  MOVLW  02
00EF:  MOVWF  4D
00F0:  CALL   078
....................    delay_ms(5); 
00F1:  MOVLW  05
00F2:  MOVWF  46
00F3:  CALL   063
....................    for(i=0;i<=3;++i) 
00F4:  CLRF   38
00F5:  MOVF   38,W
00F6:  SUBLW  03
00F7:  BTFSS  03.0
00F8:  GOTO   105
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00F9:  MOVLW  39
00FA:  ADDWF  38,W
00FB:  MOVWF  04
00FC:  BCF    03.7
00FD:  MOVF   00,W
00FE:  MOVWF  3D
00FF:  CLRF   4A
0100:  MOVF   3D,W
0101:  MOVWF  4B
0102:  CALL   08A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0103:  INCF   38,F
0104:  GOTO   0F5
0105:  BCF    0A.3
0106:  BCF    0A.4
0107:  GOTO   4A0 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0108:  DECFSZ 47,W
0109:  GOTO   10B
010A:  GOTO   10E
....................       address=LCD_LINE_TWO; 
010B:  MOVLW  40
010C:  MOVWF  48
010D:  GOTO   10F
....................    else 
....................       address=0; 
010E:  CLRF   48
....................       
....................    address+=x-1; 
010F:  MOVLW  01
0110:  SUBWF  46,W
0111:  ADDWF  48,F
....................    lcd_send_byte(0,0x80|address); 
0112:  MOVF   48,W
0113:  IORLW  80
0114:  MOVWF  49
0115:  CLRF   4A
0116:  MOVF   49,W
0117:  MOVWF  4B
0118:  CALL   08A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0119:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
011A:  MOVF   45,W
011B:  XORLW  07
011C:  BTFSC  03.2
011D:  GOTO   128
011E:  XORLW  0B
011F:  BTFSC  03.2
0120:  GOTO   12D
0121:  XORLW  06
0122:  BTFSC  03.2
0123:  GOTO   135
0124:  XORLW  02
0125:  BTFSC  03.2
0126:  GOTO   13B
0127:  GOTO   140
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0128:  MOVLW  01
0129:  MOVWF  46
012A:  MOVWF  47
012B:  CALL   108
012C:  GOTO   145
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
012D:  CLRF   4A
012E:  MOVLW  01
012F:  MOVWF  4B
0130:  CALL   08A
....................                      delay_ms(2); 
0131:  MOVLW  02
0132:  MOVWF  46
0133:  CALL   063
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0134:  GOTO   145
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0135:  MOVLW  01
0136:  MOVWF  46
0137:  MOVLW  02
0138:  MOVWF  47
0139:  CALL   108
013A:  GOTO   145
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
013B:  CLRF   4A
013C:  MOVLW  10
013D:  MOVWF  4B
013E:  CALL   08A
013F:  GOTO   145
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0140:  MOVLW  01
0141:  MOVWF  4A
0142:  MOVF   45,W
0143:  MOVWF  4B
0144:  CALL   08A
....................      #endif 
....................    } 
0145:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... //Direcciones de memoria 
.................... #BYTE PORTA= 5 
.................... #BYTE PORTB= 6 
.................... #BYTE PORTC= 7 
.................... #BYTE PORTD= 8 
....................  
.................... long cont=0; 
.................... int16 duty=0; 
.................... int Timer2,poscaler; 
.................... double RPM; 
.................... //INTERRUPCION POR RB0 
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    cont++; 
*
004F:  INCF   2B,F
0050:  BTFSC  03.2
0051:  INCF   2C,F
0052:  BCF    0B.1
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   02B
.................... } 
....................  
.................... void main() 
*
0439:  MOVF   03,W
043A:  ANDLW  1F
043B:  MOVWF  03
043C:  BSF    03.5
043D:  BSF    03.6
043E:  BCF    07.3
043F:  MOVLW  19
0440:  BCF    03.6
0441:  MOVWF  19
0442:  MOVLW  A6
0443:  MOVWF  18
0444:  MOVLW  90
0445:  BCF    03.5
0446:  MOVWF  18
0447:  CLRF   2C
0448:  CLRF   2B
0449:  CLRF   2E
044A:  CLRF   2D
044B:  MOVLW  FF
044C:  MOVWF  35
044D:  CLRF   37
044E:  CLRF   36
044F:  BSF    03.5
0450:  BSF    03.6
0451:  MOVF   09,W
0452:  ANDLW  C0
0453:  MOVWF  09
0454:  BCF    03.6
0455:  BCF    1F.4
0456:  BCF    1F.5
0457:  MOVLW  00
0458:  BSF    03.6
0459:  MOVWF  08
045A:  BCF    03.5
045B:  CLRF   07
045C:  CLRF   08
045D:  CLRF   09
045E:  BCF    03.7
.................... { 
....................  SET_TRIS_A(0x01);//RA0 COMO ENTRADA 
045F:  MOVLW  01
0460:  BSF    03.5
0461:  BCF    03.6
0462:  MOVWF  05
....................  SET_TRIS_B(0x01);//RB0 COMO ENTRADA 
0463:  MOVWF  06
....................  SET_TRIS_D(0);//PUERTO D COMO SALIDA TODOS EN CERO para la LCD 
0464:  MOVLW  00
0465:  MOVWF  08
....................  //CONFIGURAR ENTRADA ANALOGA 
....................  setup_adc_ports(sAN0);//Configura ADC(Lectura analoga de POT) 
0466:  BSF    03.6
0467:  MOVF   09,W
0468:  ANDLW  C0
0469:  MOVWF  09
046A:  BCF    03.6
046B:  BCF    1F.4
046C:  BCF    1F.5
046D:  MOVLW  01
046E:  BSF    03.6
046F:  MOVWF  08
....................  setup_adc(adc_clock_internal);//Reloj interno para la conversion 
0470:  BCF    03.5
0471:  BCF    03.6
0472:  BSF    1F.6
0473:  BSF    1F.7
0474:  BSF    03.5
0475:  BSF    1F.7
0476:  BCF    03.5
0477:  BSF    1F.0
....................  //CONFIGURACIÓN PWM 
....................  Timer2=249; //Se carga Timer2 con 249 
0478:  MOVLW  F9
0479:  MOVWF  2F
....................  //Para prescaler se coloca t2_div_by_4 
....................  poscaler=1;//preescaler solo toma valores de 1 
047A:  MOVLW  01
047B:  MOVWF  30
....................  setup_Timer_2(t2_div_by_4,Timer2,poscaler);//Configuracion de Timer 
047C:  SUBWF  30,W
047D:  MOVWF  78
047E:  RLF    78,W
047F:  MOVWF  77
0480:  RLF    77,F
0481:  RLF    77,F
0482:  MOVLW  F8
0483:  ANDWF  77,F
0484:  MOVF   77,W
0485:  IORLW  05
0486:  MOVWF  12
0487:  MOVF   2F,W
0488:  BSF    03.5
0489:  MOVWF  12
....................  setup_ccp1(ccp_pwm);//Configurar modulo ccp1 en modo 
048A:  BCF    03.5
048B:  BCF    35.2
048C:  MOVF   35,W
048D:  BSF    03.5
048E:  MOVWF  07
048F:  BCF    03.5
0490:  BCF    07.2
0491:  MOVLW  0C
0492:  MOVWF  17
0493:  BSF    03.5
0494:  CLRF   1B
0495:  CLRF   1C
0496:  MOVLW  01
0497:  MOVWF  1D
....................   
....................  //Habilitar las interrupciones 
....................  enable_interrupts(int_ext);//Activa interrupcion por RB0 
0498:  BCF    03.5
0499:  BSF    0B.4
....................  ext_int_edge(L_TO_H);     //Activa interrupcion por flanco de bajada 
049A:  BSF    03.5
049B:  BSF    01.6
....................  enable_interrupts(global);//Activa interrupciones de forma global 
049C:  MOVLW  C0
049D:  BCF    03.5
049E:  IORWF  0B,F
....................   
....................  lcd_init(); 
049F:  GOTO   0CA
....................  lcd_gotoxy(1,1); 
04A0:  MOVLW  01
04A1:  MOVWF  46
04A2:  MOVWF  47
04A3:  CALL   108
....................  LCD_PUTC("VELOCIDAD MOTOR"); 
04A4:  MOVLW  56
04A5:  BSF    03.6
04A6:  MOVWF  0D
04A7:  MOVLW  00
04A8:  MOVWF  0F
04A9:  BCF    03.6
04AA:  GOTO   146
....................   
....................  //Hacer infinitamente 
....................  while(true) 
....................  { //Lectura potenciometro 
....................   set_adc_channel(0);//Lee lo que hay en el canal analogo 
04AB:  MOVLW  00
04AC:  MOVWF  78
04AD:  MOVF   1F,W
04AE:  ANDLW  C3
04AF:  IORWF  78,W
04B0:  MOVWF  1F
....................   delay_us(100);//Espera para la lectura 
04B1:  MOVLW  21
04B2:  MOVWF  77
04B3:  DECFSZ 77,F
04B4:  GOTO   4B3
....................   duty=read_adc();//Almacena en duty lo que lee del canal 0 
04B5:  BSF    1F.1
04B6:  BTFSC  1F.1
04B7:  GOTO   4B6
04B8:  BSF    03.5
04B9:  MOVF   1E,W
04BA:  BCF    03.5
04BB:  MOVWF  2D
04BC:  MOVF   1E,W
04BD:  MOVWF  2E
....................   set_pwm1_duty(duty);//duty se aplica a la salida PWM RC2 //01 bits=1023 y 8 bits=255 
04BE:  MOVF   2E,W
04BF:  MOVWF  79
04C0:  MOVF   2D,W
04C1:  MOVWF  78
04C2:  RRF    79,F
04C3:  RRF    78,F
04C4:  RRF    79,F
04C5:  RRF    78,F
04C6:  RRF    79,F
04C7:  MOVF   78,W
04C8:  MOVWF  15
04C9:  RRF    79,F
04CA:  RRF    79,W
04CB:  ANDLW  30
04CC:  MOVWF  77
04CD:  MOVF   17,W
04CE:  ANDLW  CF
04CF:  IORWF  77,W
04D0:  MOVWF  17
....................    
....................   //Se detiene el programa por un segundo y cuando deja pasar a la siguiente linea de codigo hace el calculo RPM=cont*60/24; para determinar cuantos flancos de bajada hubieron 
....................   delay_ms(969);//Espera por un segundo se pone 999 para corregir el tiempo que gasta en las instrucciones de arriba 
04D1:  MOVLW  11
04D2:  MOVWF  38
04D3:  MOVLW  39
04D4:  MOVWF  46
04D5:  CALL   063
04D6:  DECFSZ 38,F
04D7:  GOTO   4D3
....................    
....................   RPM=cont*60/24; 
04D8:  MOVF   2C,W
04D9:  MOVWF  39
04DA:  MOVF   2B,W
04DB:  MOVWF  38
04DC:  CLRF   3B
04DD:  MOVLW  3C
04DE:  MOVWF  3A
04DF:  GOTO   19E
04E0:  MOVF   79,W
04E1:  MOVWF  39
04E2:  MOVF   78,W
04E3:  MOVWF  38
04E4:  MOVF   79,W
04E5:  MOVWF  3B
04E6:  MOVF   78,W
04E7:  MOVWF  3A
04E8:  CLRF   3D
04E9:  MOVLW  18
04EA:  MOVWF  3C
04EB:  GOTO   1B5
04EC:  MOVF   79,W
04ED:  MOVWF  7A
04EE:  MOVF   78,W
04EF:  MOVWF  38
04F0:  MOVF   79,W
04F1:  MOVWF  39
04F2:  GOTO   1DC
04F3:  MOVF   7A,W
04F4:  MOVWF  34
04F5:  MOVF   79,W
04F6:  MOVWF  33
04F7:  MOVF   78,W
04F8:  MOVWF  32
04F9:  MOVF   77,W
04FA:  MOVWF  31
....................   cont=0;//Reinicia el contador de pulsos 
04FB:  CLRF   2C
04FC:  CLRF   2B
....................   //Visualiza velocidad 
....................   lcd_gotoxy(1,2); 
04FD:  MOVLW  01
04FE:  MOVWF  46
04FF:  MOVLW  02
0500:  MOVWF  47
0501:  CALL   108
....................   printf(lcd_putc,"RPM: %f  ",RPM); 
0502:  MOVLW  5E
0503:  BSF    03.6
0504:  MOVWF  0D
0505:  MOVLW  00
0506:  MOVWF  0F
0507:  BCF    03.0
0508:  MOVLW  05
0509:  BCF    03.6
050A:  MOVWF  38
050B:  GOTO   1FB
050C:  MOVLW  89
050D:  MOVWF  04
050E:  MOVF   34,W
050F:  MOVWF  3B
0510:  MOVF   33,W
0511:  MOVWF  3A
0512:  MOVF   32,W
0513:  MOVWF  39
0514:  MOVF   31,W
0515:  MOVWF  38
0516:  MOVLW  02
0517:  MOVWF  3C
0518:  GOTO   2A3
0519:  MOVLW  20
051A:  MOVWF  45
051B:  CALL   11A
051C:  MOVLW  20
051D:  MOVWF  45
051E:  CALL   11A
....................   if(RPM>=181) 
051F:  CLRF   3B
0520:  CLRF   3A
0521:  MOVLW  35
0522:  MOVWF  39
0523:  MOVLW  86
0524:  MOVWF  38
0525:  MOVF   34,W
0526:  MOVWF  3F
0527:  MOVF   33,W
0528:  MOVWF  3E
0529:  MOVF   32,W
052A:  MOVWF  3D
052B:  MOVF   31,W
052C:  MOVWF  3C
052D:  GOTO   3F8
052E:  BTFSC  03.0
052F:  GOTO   532
0530:  BTFSS  03.2
0531:  GOTO   536
....................   printf("M"); 
0532:  MOVLW  4D
0533:  BTFSS  0C.4
0534:  GOTO   533
0535:  MOVWF  19
0536:  GOTO   4AB
....................  } 
.................... } 
0537:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
