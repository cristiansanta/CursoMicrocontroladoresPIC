CCS PCM C Compiler, Version 5.076, 56587               03-Oct-21 17:43

               Filename:   C:\Users\CRISTRONICOS\Documents\1PROGRAMACIÓN-ELECTRÓNICA\2.uC PIC\LEARNING\11.Teclado Matricial con LCD\Teclado Matricial con LCD.lst

               ROM used:   1257 words (15%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           46 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   413
0003:  NOP
.................... #INCLUDE <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  41
000C:  RETLW  34
000D:  RETLW  35
000E:  RETLW  36
000F:  RETLW  42
0010:  RETLW  37
0011:  RETLW  38
0012:  RETLW  39
0013:  RETLW  43
0014:  RETLW  2A
0015:  RETLW  30
0016:  RETLW  23
0017:  RETLW  44
0018:  DATA 0C,00
0019:  DATA CD,34
001A:  DATA F2,32
001B:  DATA 3A,10
001C:  DATA 00,01
001D:  DATA 0C,00
001E:  DATA D4,32
001F:  DATA 6D,38
0020:  DATA 65,39
0021:  DATA 61,3A
0022:  DATA 75,39
0023:  DATA 61,1D
0024:  DATA A0,12
0025:  DATA 66,10
0026:  DATA 00,00
*
010D:  MOVF   0B,W
010E:  MOVWF  2F
010F:  BCF    0B.7
0110:  BSF    03.5
0111:  BSF    03.6
0112:  BSF    0C.7
0113:  BSF    0C.0
0114:  NOP
0115:  NOP
0116:  BCF    03.5
0117:  BCF    03.6
0118:  BTFSC  2F.7
0119:  BSF    0B.7
011A:  BSF    03.6
011B:  MOVF   0C,W
011C:  ANDLW  7F
011D:  BTFSC  03.2
011E:  GOTO   161
011F:  BCF    03.6
0120:  MOVWF  2F
0121:  BSF    03.6
0122:  MOVF   0D,W
0123:  BCF    03.6
0124:  MOVWF  30
0125:  BSF    03.6
0126:  MOVF   0F,W
0127:  BCF    03.6
0128:  MOVWF  31
0129:  MOVF   2F,W
012A:  MOVWF  3C
012B:  CALL   0E1
012C:  MOVF   30,W
012D:  BSF    03.6
012E:  MOVWF  0D
012F:  BCF    03.6
0130:  MOVF   31,W
0131:  BSF    03.6
0132:  MOVWF  0F
0133:  BCF    03.6
0134:  MOVF   0B,W
0135:  MOVWF  32
0136:  BCF    0B.7
0137:  BSF    03.5
0138:  BSF    03.6
0139:  BSF    0C.7
013A:  BSF    0C.0
013B:  NOP
013C:  NOP
013D:  BCF    03.5
013E:  BCF    03.6
013F:  BTFSC  32.7
0140:  BSF    0B.7
0141:  BSF    03.6
0142:  RLF    0C,W
0143:  RLF    0E,W
0144:  ANDLW  7F
0145:  BTFSC  03.2
0146:  GOTO   161
0147:  BCF    03.6
0148:  MOVWF  2F
0149:  BSF    03.6
014A:  MOVF   0D,W
014B:  BCF    03.6
014C:  MOVWF  30
014D:  BSF    03.6
014E:  MOVF   0F,W
014F:  BCF    03.6
0150:  MOVWF  31
0151:  MOVF   2F,W
0152:  MOVWF  3C
0153:  CALL   0E1
0154:  MOVF   30,W
0155:  BSF    03.6
0156:  MOVWF  0D
0157:  BCF    03.6
0158:  MOVF   31,W
0159:  BSF    03.6
015A:  MOVWF  0F
015B:  INCF   0D,F
015C:  BTFSC  03.2
015D:  INCF   0F,F
015E:  BCF    03.6
015F:  GOTO   10D
0160:  BSF    03.6
0161:  BCF    03.6
0162:  RETURN
*
01CA:  BSF    0A.0
01CB:  BCF    0A.1
01CC:  BCF    0A.2
01CD:  ADDWF  02,F
01CE:  GOTO   16F
01CF:  GOTO   175
01D0:  GOTO   17B
01D1:  GOTO   181
*
01F5:  MOVLW  8E
01F6:  MOVWF  77
01F7:  MOVF   30,W
01F8:  MOVWF  78
01F9:  MOVF   2F,W
01FA:  MOVWF  79
01FB:  CLRF   7A
01FC:  MOVF   78,F
01FD:  BTFSS  03.2
01FE:  GOTO   209
01FF:  MOVF   79,W
0200:  MOVWF  78
0201:  CLRF   79
0202:  MOVLW  08
0203:  SUBWF  77,F
0204:  MOVF   78,F
0205:  BTFSS  03.2
0206:  GOTO   209
0207:  CLRF   77
0208:  GOTO   211
0209:  BCF    03.0
020A:  BTFSC  78.7
020B:  GOTO   210
020C:  RLF    79,F
020D:  RLF    78,F
020E:  DECF   77,F
020F:  GOTO   209
0210:  BCF    78.7
0211:  BCF    0A.3
0212:  BCF    0A.4
0213:  GOTO   4AF (RETURN)
0214:  MOVF   3C,W
0215:  BTFSC  03.2
0216:  GOTO   284
0217:  MOVWF  44
0218:  MOVF   40,W
0219:  BTFSC  03.2
021A:  GOTO   284
021B:  ADDWF  44,F
021C:  BTFSC  03.0
021D:  GOTO   225
021E:  MOVLW  7F
021F:  SUBWF  44,F
0220:  BTFSS  03.0
0221:  GOTO   284
0222:  BTFSC  03.2
0223:  GOTO   284
0224:  GOTO   229
0225:  MOVLW  81
0226:  ADDWF  44,F
0227:  BTFSC  03.0
0228:  GOTO   284
0229:  MOVF   44,W
022A:  MOVWF  77
022B:  CLRF   78
022C:  CLRF   79
022D:  CLRF   7A
022E:  MOVF   3D,W
022F:  MOVWF  48
0230:  BSF    48.7
0231:  MOVF   3E,W
0232:  MOVWF  47
0233:  MOVF   3F,W
0234:  MOVWF  46
0235:  MOVLW  18
0236:  MOVWF  44
0237:  CLRF   45
0238:  BTFSS  46.0
0239:  GOTO   252
023A:  MOVF   43,W
023B:  ADDWF  7A,F
023C:  BTFSS  03.0
023D:  GOTO   244
023E:  INCF   79,F
023F:  BTFSS  03.2
0240:  GOTO   244
0241:  INCF   78,F
0242:  BTFSC  03.2
0243:  BSF    45.7
0244:  MOVF   42,W
0245:  ADDWF  79,F
0246:  BTFSS  03.0
0247:  GOTO   24B
0248:  INCF   78,F
0249:  BTFSC  03.2
024A:  BSF    45.7
024B:  MOVF   41,W
024C:  MOVWF  3E
024D:  BSF    3E.7
024E:  MOVF   3E,W
024F:  ADDWF  78,F
0250:  BTFSC  03.0
0251:  BSF    45.7
0252:  RLF    45,F
0253:  RRF    78,F
0254:  RRF    79,F
0255:  RRF    7A,F
0256:  RRF    48,F
0257:  RRF    47,F
0258:  RRF    46,F
0259:  BCF    03.0
025A:  DECFSZ 44,F
025B:  GOTO   237
025C:  MOVLW  01
025D:  ADDWF  77,F
025E:  BTFSC  03.0
025F:  GOTO   284
0260:  BTFSC  78.7
0261:  GOTO   269
0262:  RLF    48,F
0263:  RLF    7A,F
0264:  RLF    79,F
0265:  RLF    78,F
0266:  DECF   77,F
0267:  BTFSC  03.2
0268:  GOTO   284
0269:  BTFSS  48.7
026A:  GOTO   27A
026B:  INCF   7A,F
026C:  BTFSS  03.2
026D:  GOTO   27A
026E:  INCF   79,F
026F:  BTFSS  03.2
0270:  GOTO   27A
0271:  INCF   78,F
0272:  BTFSS  03.2
0273:  GOTO   27A
0274:  RRF    78,F
0275:  RRF    79,F
0276:  RRF    7A,F
0277:  INCF   77,F
0278:  BTFSC  03.2
0279:  GOTO   284
027A:  MOVF   3D,W
027B:  MOVWF  45
027C:  MOVF   41,W
027D:  XORWF  45,F
027E:  BTFSS  45.7
027F:  GOTO   282
0280:  BSF    78.7
0281:  GOTO   288
0282:  BCF    78.7
0283:  GOTO   288
0284:  CLRF   77
0285:  CLRF   78
0286:  CLRF   79
0287:  CLRF   7A
0288:  RETURN
0289:  MOVF   0B,W
028A:  MOVWF  30
028B:  BCF    0B.7
028C:  BSF    03.5
028D:  BSF    03.6
028E:  BSF    0C.7
028F:  BSF    0C.0
0290:  NOP
0291:  NOP
0292:  BCF    03.5
0293:  BCF    03.6
0294:  BTFSC  30.7
0295:  BSF    0B.7
0296:  BTFSC  03.0
0297:  GOTO   2C0
0298:  BSF    03.6
0299:  MOVF   0C,W
029A:  ANDLW  7F
029B:  BCF    03.6
029C:  MOVWF  30
029D:  BSF    03.6
029E:  MOVF   0D,W
029F:  BCF    03.6
02A0:  MOVWF  31
02A1:  BSF    03.6
02A2:  MOVF   0F,W
02A3:  BCF    03.6
02A4:  MOVWF  32
02A5:  MOVF   30,W
02A6:  MOVWF  3C
02A7:  CALL   0E1
02A8:  MOVF   31,W
02A9:  BSF    03.6
02AA:  MOVWF  0D
02AB:  BCF    03.6
02AC:  MOVF   32,W
02AD:  BSF    03.6
02AE:  MOVWF  0F
02AF:  BCF    03.6
02B0:  MOVF   0B,W
02B1:  MOVWF  33
02B2:  BCF    0B.7
02B3:  BSF    03.5
02B4:  BSF    03.6
02B5:  BSF    0C.7
02B6:  BSF    0C.0
02B7:  NOP
02B8:  NOP
02B9:  BCF    03.5
02BA:  BCF    03.6
02BB:  BTFSC  33.7
02BC:  BSF    0B.7
02BD:  DECFSZ 2F,F
02BE:  GOTO   2C0
02BF:  GOTO   2DF
02C0:  BSF    03.6
02C1:  RLF    0C,W
02C2:  RLF    0E,W
02C3:  ANDLW  7F
02C4:  BCF    03.6
02C5:  MOVWF  30
02C6:  BSF    03.6
02C7:  MOVF   0D,W
02C8:  BCF    03.6
02C9:  MOVWF  31
02CA:  BSF    03.6
02CB:  MOVF   0F,W
02CC:  BCF    03.6
02CD:  MOVWF  32
02CE:  MOVF   30,W
02CF:  MOVWF  3C
02D0:  CALL   0E1
02D1:  MOVF   31,W
02D2:  BSF    03.6
02D3:  MOVWF  0D
02D4:  BCF    03.6
02D5:  MOVF   32,W
02D6:  BSF    03.6
02D7:  MOVWF  0F
02D8:  INCF   0D,F
02D9:  BTFSC  03.2
02DA:  INCF   0F,F
02DB:  BCF    03.0
02DC:  BCF    03.6
02DD:  DECFSZ 2F,F
02DE:  GOTO   289
02DF:  BCF    0A.3
02E0:  BCF    0A.4
02E1:  GOTO   4D6 (RETURN)
02E2:  BTFSC  03.1
02E3:  GOTO   2E7
02E4:  MOVLW  44
02E5:  MOVWF  04
02E6:  BCF    03.7
02E7:  CLRF   77
02E8:  CLRF   78
02E9:  CLRF   79
02EA:  CLRF   7A
02EB:  CLRF   44
02EC:  CLRF   45
02ED:  CLRF   46
02EE:  CLRF   47
02EF:  MOVF   43,W
02F0:  IORWF  42,W
02F1:  IORWF  41,W
02F2:  IORWF  40,W
02F3:  BTFSC  03.2
02F4:  GOTO   325
02F5:  MOVLW  20
02F6:  MOVWF  48
02F7:  BCF    03.0
02F8:  RLF    3C,F
02F9:  RLF    3D,F
02FA:  RLF    3E,F
02FB:  RLF    3F,F
02FC:  RLF    44,F
02FD:  RLF    45,F
02FE:  RLF    46,F
02FF:  RLF    47,F
0300:  MOVF   43,W
0301:  SUBWF  47,W
0302:  BTFSS  03.2
0303:  GOTO   30E
0304:  MOVF   42,W
0305:  SUBWF  46,W
0306:  BTFSS  03.2
0307:  GOTO   30E
0308:  MOVF   41,W
0309:  SUBWF  45,W
030A:  BTFSS  03.2
030B:  GOTO   30E
030C:  MOVF   40,W
030D:  SUBWF  44,W
030E:  BTFSS  03.0
030F:  GOTO   31F
0310:  MOVF   40,W
0311:  SUBWF  44,F
0312:  MOVF   41,W
0313:  BTFSS  03.0
0314:  INCFSZ 41,W
0315:  SUBWF  45,F
0316:  MOVF   42,W
0317:  BTFSS  03.0
0318:  INCFSZ 42,W
0319:  SUBWF  46,F
031A:  MOVF   43,W
031B:  BTFSS  03.0
031C:  INCFSZ 43,W
031D:  SUBWF  47,F
031E:  BSF    03.0
031F:  RLF    77,F
0320:  RLF    78,F
0321:  RLF    79,F
0322:  RLF    7A,F
0323:  DECFSZ 48,F
0324:  GOTO   2F7
0325:  MOVF   44,W
0326:  MOVWF  00
0327:  INCF   04,F
0328:  MOVF   45,W
0329:  MOVWF  00
032A:  INCF   04,F
032B:  MOVF   46,W
032C:  MOVWF  00
032D:  INCF   04,F
032E:  MOVF   47,W
032F:  MOVWF  00
0330:  RETURN
0331:  MOVF   04,W
0332:  MOVWF  34
0333:  MOVF   33,W
0334:  MOVWF  36
0335:  BTFSC  03.2
0336:  GOTO   350
0337:  MOVF   32,W
0338:  MOVWF  3F
0339:  MOVF   31,W
033A:  MOVWF  3E
033B:  MOVF   30,W
033C:  MOVWF  3D
033D:  MOVF   2F,W
033E:  MOVWF  3C
033F:  CLRF   43
0340:  CLRF   42
0341:  MOVLW  20
0342:  MOVWF  41
0343:  MOVLW  82
0344:  MOVWF  40
0345:  CALL   214
0346:  MOVF   7A,W
0347:  MOVWF  32
0348:  MOVF   79,W
0349:  MOVWF  31
034A:  MOVF   78,W
034B:  MOVWF  30
034C:  MOVF   77,W
034D:  MOVWF  2F
034E:  DECFSZ 36,F
034F:  GOTO   337
0350:  MOVF   32,W
0351:  MOVWF  3F
0352:  MOVF   31,W
0353:  MOVWF  3E
0354:  MOVF   30,W
0355:  MOVWF  3D
0356:  MOVF   2F,W
0357:  MOVWF  3C
0358:  MOVF   3C,W
0359:  SUBLW  B6
035A:  MOVWF  3C
035B:  CLRF   7A
035C:  MOVF   3D,W
035D:  MOVWF  40
035E:  BSF    3D.7
035F:  BCF    03.0
0360:  RRF    3D,F
0361:  RRF    3E,F
0362:  RRF    3F,F
0363:  RRF    7A,F
0364:  RRF    79,F
0365:  RRF    78,F
0366:  RRF    77,F
0367:  DECFSZ 3C,F
0368:  GOTO   35F
0369:  BTFSS  40.7
036A:  GOTO   376
036B:  COMF   77,F
036C:  COMF   78,F
036D:  COMF   79,F
036E:  COMF   7A,F
036F:  INCF   77,F
0370:  BTFSC  03.2
0371:  INCF   78,F
0372:  BTFSC  03.2
0373:  INCF   79,F
0374:  BTFSC  03.2
0375:  INCF   7A,F
0376:  MOVF   7A,W
0377:  MOVWF  32
0378:  MOVF   79,W
0379:  MOVWF  31
037A:  MOVF   78,W
037B:  MOVWF  30
037C:  MOVF   77,W
037D:  MOVWF  2F
037E:  BTFSS  32.7
037F:  GOTO   38D
0380:  DECF   34,F
0381:  BSF    34.5
0382:  COMF   2F,F
0383:  COMF   30,F
0384:  COMF   31,F
0385:  COMF   32,F
0386:  INCF   2F,F
0387:  BTFSC  03.2
0388:  INCF   30,F
0389:  BTFSC  03.2
038A:  INCF   31,F
038B:  BTFSC  03.2
038C:  INCF   32,F
038D:  MOVLW  3B
038E:  MOVWF  3B
038F:  MOVLW  9A
0390:  MOVWF  3A
0391:  MOVLW  CA
0392:  MOVWF  39
0393:  CLRF   38
0394:  MOVLW  0A
0395:  MOVWF  36
0396:  MOVF   33,W
0397:  BTFSC  03.2
0398:  INCF   34,F
0399:  BSF    03.1
039A:  MOVLW  2F
039B:  MOVWF  04
039C:  BCF    03.7
039D:  MOVF   32,W
039E:  MOVWF  3F
039F:  MOVF   31,W
03A0:  MOVWF  3E
03A1:  MOVF   30,W
03A2:  MOVWF  3D
03A3:  MOVF   2F,W
03A4:  MOVWF  3C
03A5:  MOVF   3B,W
03A6:  MOVWF  43
03A7:  MOVF   3A,W
03A8:  MOVWF  42
03A9:  MOVF   39,W
03AA:  MOVWF  41
03AB:  MOVF   38,W
03AC:  MOVWF  40
03AD:  CALL   2E2
03AE:  MOVF   78,W
03AF:  MOVF   77,F
03B0:  BTFSS  03.2
03B1:  GOTO   3C5
03B2:  INCF   33,W
03B3:  SUBWF  36,W
03B4:  BTFSC  03.2
03B5:  GOTO   3C5
03B6:  MOVF   34,W
03B7:  BTFSC  03.2
03B8:  GOTO   3C7
03B9:  ANDLW  0F
03BA:  SUBWF  36,W
03BB:  BTFSC  03.2
03BC:  GOTO   3BF
03BD:  BTFSC  03.0
03BE:  GOTO   3F7
03BF:  BTFSC  34.7
03C0:  GOTO   3F7
03C1:  BTFSC  34.6
03C2:  GOTO   3C7
03C3:  MOVLW  20
03C4:  GOTO   3F3
03C5:  MOVLW  20
03C6:  ANDWF  34,F
03C7:  BTFSS  34.5
03C8:  GOTO   3D5
03C9:  BCF    34.5
03CA:  MOVF   33,W
03CB:  BTFSS  03.2
03CC:  DECF   34,F
03CD:  MOVF   77,W
03CE:  MOVWF  34
03CF:  MOVLW  2D
03D0:  MOVWF  3C
03D1:  CALL   0E1
03D2:  MOVF   34,W
03D3:  MOVWF  77
03D4:  CLRF   34
03D5:  MOVF   33,W
03D6:  SUBWF  36,W
03D7:  BTFSS  03.2
03D8:  GOTO   3E3
03D9:  MOVF   77,W
03DA:  MOVWF  34
03DB:  MOVLW  2E
03DC:  MOVWF  3C
03DD:  CALL   0E1
03DE:  MOVF   34,W
03DF:  MOVWF  77
03E0:  MOVLW  20
03E1:  ANDWF  34,F
03E2:  MOVLW  00
03E3:  MOVLW  30
03E4:  BTFSS  34.5
03E5:  GOTO   3F3
03E6:  BCF    34.5
03E7:  MOVF   33,W
03E8:  BTFSS  03.2
03E9:  DECF   34,F
03EA:  MOVF   77,W
03EB:  MOVWF  34
03EC:  MOVLW  2D
03ED:  MOVWF  3C
03EE:  CALL   0E1
03EF:  MOVF   34,W
03F0:  MOVWF  77
03F1:  CLRF   34
03F2:  MOVLW  30
03F3:  ADDWF  77,F
03F4:  MOVF   77,W
03F5:  MOVWF  3C
03F6:  CALL   0E1
03F7:  BCF    03.1
03F8:  MOVF   3B,W
03F9:  MOVWF  3F
03FA:  MOVF   3A,W
03FB:  MOVWF  3E
03FC:  MOVF   39,W
03FD:  MOVWF  3D
03FE:  MOVF   38,W
03FF:  MOVWF  3C
0400:  CLRF   43
0401:  CLRF   42
0402:  CLRF   41
0403:  MOVLW  0A
0404:  MOVWF  40
0405:  CALL   2E2
0406:  MOVF   7A,W
0407:  MOVWF  3B
0408:  MOVF   79,W
0409:  MOVWF  3A
040A:  MOVF   78,W
040B:  MOVWF  39
040C:  MOVF   77,W
040D:  MOVWF  38
040E:  DECFSZ 36,F
040F:  GOTO   399
0410:  BCF    0A.3
0411:  BCF    0A.4
0412:  GOTO   4E3 (RETURN)
....................  
.................... #list 
....................  
.................... //#USE DELAY(CLOCK=4000000) //RELOJ INTERNO 4MHz 
.................... #device ADC=10 
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
.................... #USE DELAY(CLOCK=4000000,crystal)//Crystal Externo 4MHz 
*
002A:  MOVLW  3D
002B:  MOVWF  04
002C:  BCF    03.7
002D:  MOVF   00,W
002E:  BTFSC  03.2
002F:  GOTO   03E
0030:  MOVLW  01
0031:  MOVWF  78
0032:  CLRF   77
0033:  DECFSZ 77,F
0034:  GOTO   033
0035:  DECFSZ 78,F
0036:  GOTO   032
0037:  MOVLW  4A
0038:  MOVWF  77
0039:  DECFSZ 77,F
003A:  GOTO   039
003B:  GOTO   03C
003C:  DECFSZ 00,F
003D:  GOTO   030
003E:  RETURN
.................... #USE RS232(UART1,baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #include <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0057:  MOVLW  0F
0058:  BSF    03.5
0059:  ANDWF  08,W
005A:  IORLW  F0
005B:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
005C:  BCF    03.5
005D:  BSF    08.2
....................    delay_cycles(1); 
005E:  NOP
....................    lcd_output_enable(1); 
005F:  BSF    08.0
....................    delay_cycles(1); 
0060:  NOP
....................    high = lcd_read_nibble(); 
0061:  CALL   04B
0062:  MOVF   78,W
0063:  MOVWF  44
....................        
....................    lcd_output_enable(0); 
0064:  BCF    08.0
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_enable(1); 
0066:  BSF    08.0
....................    delay_us(1); 
0067:  NOP
....................    low = lcd_read_nibble(); 
0068:  CALL   04B
0069:  MOVF   78,W
006A:  MOVWF  43
....................        
....................    lcd_output_enable(0); 
006B:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006C:  MOVLW  0F
006D:  BSF    03.5
006E:  ANDWF  08,W
006F:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0070:  BCF    03.5
0071:  SWAPF  44,W
0072:  MOVWF  77
0073:  MOVLW  F0
0074:  ANDWF  77,F
0075:  MOVF   77,W
0076:  IORWF  43,W
0077:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
004B:  MOVF   08,W
004C:  MOVWF  77
004D:  SWAPF  08,W
004E:  ANDLW  0F
004F:  MOVWF  78
....................   #endif 
0050:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
003F:  SWAPF  44,W
0040:  ANDLW  F0
0041:  MOVWF  77
0042:  MOVLW  0F
0043:  ANDWF  08,W
0044:  IORWF  77,W
0045:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BSF    08.0
....................    delay_us(2); 
0048:  GOTO   049
....................    lcd_output_enable(0); 
0049:  BCF    08.0
004A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0051:  BSF    03.5
0052:  BCF    08.0
....................    lcd_rs_tris(); 
0053:  BCF    08.1
....................    lcd_rw_tris(); 
0054:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0055:  BCF    03.5
0056:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0078:  MOVF   78,W
0079:  MOVWF  43
007A:  BTFSC  43.7
007B:  GOTO   057
....................    lcd_output_rs(address); 
007C:  BTFSS  41.0
007D:  BCF    08.1
007E:  BTFSC  41.0
007F:  BSF    08.1
....................    delay_cycles(1); 
0080:  NOP
....................    lcd_output_rw(0); 
0081:  BCF    08.2
....................    delay_cycles(1); 
0082:  NOP
....................    lcd_output_enable(0); 
0083:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0084:  SWAPF  42,W
0085:  MOVWF  43
0086:  MOVLW  0F
0087:  ANDWF  43,F
0088:  MOVF   43,W
0089:  MOVWF  44
008A:  CALL   03F
....................    lcd_send_nibble(n & 0xf); 
008B:  MOVF   42,W
008C:  ANDLW  0F
008D:  MOVWF  43
008E:  MOVWF  44
008F:  CALL   03F
0090:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0091:  MOVLW  28
0092:  MOVWF  30
0093:  MOVLW  0C
0094:  MOVWF  31
0095:  MOVLW  01
0096:  MOVWF  32
0097:  MOVLW  06
0098:  MOVWF  33
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0099:  BCF    08.0
....................    lcd_output_rs(0); 
009A:  BCF    08.1
....................    lcd_output_rw(0); 
009B:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
009C:  MOVLW  0F
009D:  BSF    03.5
009E:  ANDWF  08,W
009F:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00A0:  BCF    08.0
....................    lcd_rs_tris(); 
00A1:  BCF    08.1
....................    lcd_rw_tris(); 
00A2:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00A3:  MOVLW  0F
00A4:  BCF    03.5
00A5:  MOVWF  3D
00A6:  CALL   02A
....................    for(i=1;i<=3;++i) 
00A7:  MOVLW  01
00A8:  MOVWF  2F
00A9:  MOVF   2F,W
00AA:  SUBLW  03
00AB:  BTFSS  03.0
00AC:  GOTO   0B5
....................    { 
....................        lcd_send_nibble(3); 
00AD:  MOVLW  03
00AE:  MOVWF  44
00AF:  CALL   03F
....................        delay_ms(5); 
00B0:  MOVLW  05
00B1:  MOVWF  3D
00B2:  CALL   02A
00B3:  INCF   2F,F
00B4:  GOTO   0A9
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B5:  MOVLW  02
00B6:  MOVWF  44
00B7:  CALL   03F
....................    delay_ms(5); 
00B8:  MOVLW  05
00B9:  MOVWF  3D
00BA:  CALL   02A
....................    for(i=0;i<=3;++i) 
00BB:  CLRF   2F
00BC:  MOVF   2F,W
00BD:  SUBLW  03
00BE:  BTFSS  03.0
00BF:  GOTO   0CC
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C0:  MOVLW  30
00C1:  ADDWF  2F,W
00C2:  MOVWF  04
00C3:  BCF    03.7
00C4:  MOVF   00,W
00C5:  MOVWF  34
00C6:  CLRF   41
00C7:  MOVF   34,W
00C8:  MOVWF  42
00C9:  CALL   051
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CA:  INCF   2F,F
00CB:  GOTO   0BC
00CC:  BCF    0A.3
00CD:  BCF    0A.4
00CE:  GOTO   45B (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00CF:  DECFSZ 3E,W
00D0:  GOTO   0D2
00D1:  GOTO   0D5
....................       address=LCD_LINE_TWO; 
00D2:  MOVLW  40
00D3:  MOVWF  3F
00D4:  GOTO   0D6
....................    else 
....................       address=0; 
00D5:  CLRF   3F
....................       
....................    address+=x-1; 
00D6:  MOVLW  01
00D7:  SUBWF  3D,W
00D8:  ADDWF  3F,F
....................    lcd_send_byte(0,0x80|address); 
00D9:  MOVF   3F,W
00DA:  IORLW  80
00DB:  MOVWF  40
00DC:  CLRF   41
00DD:  MOVF   40,W
00DE:  MOVWF  42
00DF:  CALL   051
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E0:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00E1:  MOVF   3C,W
00E2:  XORLW  07
00E3:  BTFSC  03.2
00E4:  GOTO   0EF
00E5:  XORLW  0B
00E6:  BTFSC  03.2
00E7:  GOTO   0F4
00E8:  XORLW  06
00E9:  BTFSC  03.2
00EA:  GOTO   0FC
00EB:  XORLW  02
00EC:  BTFSC  03.2
00ED:  GOTO   102
00EE:  GOTO   107
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00EF:  MOVLW  01
00F0:  MOVWF  3D
00F1:  MOVWF  3E
00F2:  CALL   0CF
00F3:  GOTO   10C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F4:  CLRF   41
00F5:  MOVLW  01
00F6:  MOVWF  42
00F7:  CALL   051
....................                      delay_ms(2); 
00F8:  MOVLW  02
00F9:  MOVWF  3D
00FA:  CALL   02A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00FB:  GOTO   10C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00FC:  MOVLW  01
00FD:  MOVWF  3D
00FE:  MOVLW  02
00FF:  MOVWF  3E
0100:  CALL   0CF
0101:  GOTO   10C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0102:  CLRF   41
0103:  MOVLW  10
0104:  MOVWF  42
0105:  CALL   051
0106:  GOTO   10C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0107:  MOVLW  01
0108:  MOVWF  41
0109:  MOVF   3C,W
010A:  MOVWF  42
010B:  CALL   051
....................      #endif 
....................    } 
010C:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #DEFINE USE_PORTB_KBD //Por defecto el teclado se conecta al puerto D 
.................... #INCLUDE <kbd4x4_1.C> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD4x4_1.C                                //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81                   // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83                   // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                 // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 4) 
.................... #define COL1 (1 << 5) 
.................... #define COL2 (1 << 6) 
.................... #define COL3 (1 << 7) 
....................  
.................... #define ROW0 (1 << 0) 
.................... #define ROW1 (1 << 1) 
.................... #define ROW2 (1 << 2) 
.................... #define ROW3 (1 << 3) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'1','2','3','A'}, 
....................                          {'4','5','6','B'}, 
....................                          {'7','8','9','C'}, 
....................                          {'*','0','#','D'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
0027:  BCF    0A.3
0028:  BCF    0A.4
0029:  GOTO   455 (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
0435:  BCF    03.6
0436:  CLRF   20
....................    static int1 kbd_down; 
0437:  BCF    21.0
....................    static char last_key; 
0438:  CLRF   22
....................    static BYTE col; 
0439:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
0163:  CLRF   32
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
0164:  INCF   20,F
0165:  MOVF   20,W
0166:  SUBLW  21
0167:  BTFSC  03.0
0168:  GOTO   1C3
....................        switch (col) { 
0169:  MOVF   23,W
016A:  ADDLW  FC
016B:  BTFSC  03.0
016C:  GOTO   186
016D:  ADDLW  04
016E:  GOTO   1CA
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
016F:  MOVLW  EF
0170:  BSF    03.5
0171:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
0172:  BCF    03.5
0173:  MOVWF  06
....................                     break; 
0174:  GOTO   186
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
0175:  MOVLW  DF
0176:  BSF    03.5
0177:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0178:  BCF    03.5
0179:  MOVWF  06
....................                     break; 
017A:  GOTO   186
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
017B:  MOVLW  BF
017C:  BSF    03.5
017D:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
017E:  BCF    03.5
017F:  MOVWF  06
....................                     break; 
0180:  GOTO   186
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
0181:  MOVLW  7F
0182:  BSF    03.5
0183:  MOVWF  06
....................                     kbd=~COL3&ALL_PINS; 
0184:  BCF    03.5
0185:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
0186:  BTFSS  21.0
0187:  GOTO   192
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
0188:  MOVF   06,W
0189:  ANDLW  0F
018A:  SUBLW  0F
018B:  BTFSS  03.2
018C:  GOTO   191
....................            kbd_down=FALSE; 
018D:  BCF    21.0
....................            kchar=last_key; 
018E:  MOVF   22,W
018F:  MOVWF  32
....................            last_key='\0'; 
0190:  CLRF   22
....................          } 
....................        } else { 
0191:  GOTO   1C2
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0192:  MOVF   06,W
0193:  ANDLW  0F
0194:  SUBLW  0F
0195:  BTFSC  03.2
0196:  GOTO   1BD
....................              if((kbd & ROW0)==0) 
0197:  MOVF   06,W
0198:  ANDLW  01
0199:  BTFSS  03.2
019A:  GOTO   19D
....................                row=0; 
019B:  CLRF   33
019C:  GOTO   1B1
....................              else if((kbd & ROW1)==0) 
019D:  MOVF   06,W
019E:  ANDLW  02
019F:  BTFSS  03.2
01A0:  GOTO   1A4
....................                row=1; 
01A1:  MOVLW  01
01A2:  MOVWF  33
01A3:  GOTO   1B1
....................              else if((kbd & ROW2)==0) 
01A4:  MOVF   06,W
01A5:  ANDLW  04
01A6:  BTFSS  03.2
01A7:  GOTO   1AB
....................                row=2; 
01A8:  MOVLW  02
01A9:  MOVWF  33
01AA:  GOTO   1B1
....................              else if((kbd & ROW3)==0) 
01AB:  MOVF   06,W
01AC:  ANDLW  08
01AD:  BTFSS  03.2
01AE:  GOTO   1B1
....................                row=3; 
01AF:  MOVLW  03
01B0:  MOVWF  33
....................              last_key =KEYS[row][col]; 
01B1:  RLF    33,W
01B2:  MOVWF  77
01B3:  RLF    77,F
01B4:  MOVLW  FC
01B5:  ANDWF  77,F
01B6:  MOVF   77,W
01B7:  ADDWF  23,W
01B8:  CALL   004
01B9:  MOVWF  78
01BA:  MOVWF  22
....................              kbd_down = TRUE; 
01BB:  BSF    21.0
....................           } else { 
01BC:  GOTO   1C2
....................              ++col; 
01BD:  INCF   23,F
....................              if(col==4) 
01BE:  MOVF   23,W
01BF:  SUBLW  04
01C0:  BTFSC  03.2
....................                col=0; 
01C1:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
01C2:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
01C3:  MOVLW  FF
01C4:  BSF    03.5
01C5:  MOVWF  06
....................   return(kchar); 
01C6:  BCF    03.5
01C7:  MOVF   32,W
01C8:  MOVWF  78
01C9:  RETURN
.................... } 
....................  
....................  
.................... #USE standard_io(b)//Definir el puerto B como estandar de entradas y salidas 
.................... #DEFINE Key_wait 200//Tiempo de espera del teclado en milisegundos - si en 200ms no presionan nada continue con la siguiente linea del programa 
....................  
.................... #BYTE PORTA= 5//Entrada Sensor 
.................... #BYTE PORTC= 7//Salida PWM 
.................... #BYTE PORTB= 6//Teclado entrada 
.................... #BYTE PORTD= 8 //SALIDA Para la LCD 
.................... //Variables configuracion PWM 
.................... long bits;//Almacena los bits 
.................... float temp;//Almacena temperatura 
....................  
....................    int DIR;//Contar digitos que se van mostrando en la LCD 
....................  
.................... //FUNCION TECLA 
.................... char tecla(void) 
.................... { 
....................    char k; 
....................    do{ //espera hasta que se presione una tecla 
....................        k=kbd_getc();//Captura la informacion obtenida del teclado 
....................      } 
....................     while(k=='\0'); 
....................     return(k);     
.................... } 
....................  
.................... /*===========================================================================*/ 
.................... /*=========================    FUNCION TECLA CON TIMER    ===================*/ 
.................... /*===========================================================================*/ 
.................... /*PREGUNTA POR UNA TECLA POR U TIEMPO DETERMINADO Y SI NO HAY ACTIVIDAD, DEJA DE 
.................... PREGUNTAR Y DEJA QUE EL PIC CONTINUE CON SU TRABAJO*/ 
.................... CHAr tecla_time(void)//tipo interrupcion las demas lineas de codigo se pueden seguir ejecutando pero si se detecta el teclado muestra el valor retornado 
*
01D2:  CLRF   2F
.................... { 
....................    char c='\0'; 
....................    unsigned int16 timeout; 
....................    timeout=0; 
01D3:  CLRF   31
01D4:  CLRF   30
....................    c=kbd_getc();//Captura valor del teclado 
01D5:  CALL   163
01D6:  MOVF   78,W
01D7:  MOVWF  2F
....................    while(c=='\0' && (++timeout < 20000)) 
01D8:  MOVF   2F,F
01D9:  BTFSS  03.2
01DA:  GOTO   1F0
01DB:  INCF   30,F
01DC:  BTFSC  03.2
01DD:  INCF   31,F
01DE:  MOVF   31,W
01DF:  SUBLW  4E
01E0:  BTFSS  03.0
01E1:  GOTO   1F0
01E2:  BTFSS  03.2
01E3:  GOTO   1E8
01E4:  MOVF   30,W
01E5:  SUBLW  1F
01E6:  BTFSS  03.0
01E7:  GOTO   1F0
....................    { 
....................      delay_us(10);//Incrementa cada 10 microseconds//////OTRA OPCION DE INTERRUPCIÓN 
01E8:  MOVLW  03
01E9:  MOVWF  77
01EA:  DECFSZ 77,F
01EB:  GOTO   1EA
....................      c=kbd_getc();//Captura valor del teclado 
01EC:  CALL   163
01ED:  MOVF   78,W
01EE:  MOVWF  2F
01EF:  GOTO   1D8
....................    } 
....................    return (c); 
01F0:  MOVF   2F,W
01F1:  MOVWF  78
01F2:  BCF    0A.3
01F3:  BCF    0A.4
01F4:  GOTO   48B (RETURN)
.................... } 
....................  
.................... void main() 
*
0413:  MOVF   03,W
0414:  ANDLW  1F
0415:  MOVWF  03
0416:  BSF    03.5
0417:  BSF    03.6
0418:  BCF    07.3
0419:  MOVLW  19
041A:  BCF    03.6
041B:  MOVWF  19
041C:  MOVLW  A6
041D:  MOVWF  18
041E:  MOVLW  90
041F:  BCF    03.5
0420:  MOVWF  18
0421:  MOVLW  FF
0422:  MOVWF  2B
0423:  CLRF   2D
0424:  CLRF   2C
0425:  BSF    03.5
0426:  BSF    03.6
0427:  MOVF   09,W
0428:  ANDLW  C0
0429:  MOVWF  09
042A:  BCF    03.6
042B:  BCF    1F.4
042C:  BCF    1F.5
042D:  MOVLW  00
042E:  BSF    03.6
042F:  MOVWF  08
0430:  BCF    03.5
0431:  CLRF   07
0432:  CLRF   08
0433:  CLRF   09
0434:  BCF    03.7
.................... {  
....................   char k_1; 
....................        //PORT_B_PULLUPS(TRUE);//PARA EL 16F887 NO SIRVE ESTA INSTRUCCION //Habilitar resistencias internas de los 1ros 4 puertos de RB 
....................        port_b_pullups(0xFF);//Utiliza resistencias internas PULLUP DEL PUERTO B 
*
043A:  MOVLW  FF
043B:  BSF    03.5
043C:  MOVWF  15
043D:  BCF    01.7
....................       //! OPTION_REG = 0;//En el main se desactiva el registro OPTION 
....................       //! WPUB=0B11111111;// y se seleccionan los PULLUPS que se van a utilizar  
....................        set_tris_a(0b00000001);//RA0 COMO ENTRADA 
043E:  MOVLW  01
043F:  MOVWF  05
....................       // SET_TRIS_A(0x01);//otra forma de declarar pin A0 como entrada 
....................        SET_TRIS_B(0);//SALIDA 
0440:  MOVLW  00
0441:  MOVWF  06
....................        // SET_TRIS_D(0B00000000);//NO SE CONFIGURA PARA LA LCD PORQUQE YA ESTA DECLARADA POR DEFECTO EN LA LIBRERIA 
....................         
....................        setup_adc_ports(sAN0);//POner RA0 como Analogo 
0442:  BSF    03.6
0443:  MOVF   09,W
0444:  ANDLW  C0
0445:  MOVWF  09
0446:  BCF    03.6
0447:  BCF    1F.4
0448:  BCF    1F.5
0449:  MOVLW  01
044A:  BSF    03.6
044B:  MOVWF  08
....................        setup_adc(adc_clock_internal);//SELÉCCIONO RELOJ INTERNO PARA CONVERSIÓN 
044C:  BCF    03.5
044D:  BCF    03.6
044E:  BSF    1F.6
044F:  BSF    1F.7
0450:  BSF    03.5
0451:  BSF    1F.7
0452:  BCF    03.5
0453:  BSF    1F.0
....................            
....................        KBD_INIT();//inicializar DRIVER del teclado 
0454:  GOTO   027
....................        SET_TRIS_C(0);//Configurar el puerto C como salida 
0455:  MOVLW  00
0456:  BSF    03.5
0457:  MOVWF  07
0458:  BCF    03.5
0459:  MOVWF  2B
....................        LCD_INIT();////inicializar DRIVER de LCD 
045A:  GOTO   091
....................        LCD_PUTC("\f");//Limpia LCD 
045B:  MOVLW  18
045C:  BSF    03.6
045D:  MOVWF  0D
045E:  MOVLW  00
045F:  MOVWF  0F
0460:  BCF    03.6
0461:  CALL   10D
....................         
....................        while(true) 
....................        { DIR=9; 
0462:  MOVLW  09
0463:  MOVWF  2A
....................          lcd_gotoxy(1,2); 
0464:  MOVLW  01
0465:  MOVWF  3D
0466:  MOVLW  02
0467:  MOVWF  3E
0468:  CALL   0CF
....................          lcd_putc("Mire: "); 
0469:  MOVLW  19
046A:  BSF    03.6
046B:  MOVWF  0D
046C:  MOVLW  00
046D:  MOVWF  0F
046E:  BCF    03.6
046F:  CALL   10D
....................          lcd_gotoxy(1,2); 
0470:  MOVLW  01
0471:  MOVWF  3D
0472:  MOVLW  02
0473:  MOVWF  3E
0474:  CALL   0CF
....................            while(DIR<17) 
0475:  MOVF   2A,W
0476:  SUBLW  10
0477:  BTFSS  03.0
0478:  GOTO   4E7
....................            { 
....................                         
....................              if(k_1!='\0'){//Pregunta si K esta vacio o no esta vacio 
0479:  MOVF   2E,F
047A:  BTFSC  03.2
047B:  GOTO   48A
....................                 LCD_GOTOXY(DIR,2); 
047C:  MOVF   2A,W
047D:  MOVWF  3D
047E:  MOVLW  02
047F:  MOVWF  3E
0480:  CALL   0CF
....................                 LCD_PUTC(k_1); 
0481:  MOVF   2E,W
0482:  MOVWF  3C
0483:  CALL   0E1
....................                 printf("%c",k_1); 
0484:  MOVF   2E,W
0485:  BTFSS  0C.4
0486:  GOTO   485
0487:  MOVWF  19
....................                 k_1='\0';//Deja vacia la variable 
0488:  CLRF   2E
....................                 DIR++; 
0489:  INCF   2A,F
....................              } 
....................              //FORMAS DE CAPTURAR DATOS DEL TECLADO 
....................             k_1=tecla_time();//recoge el valor de la funcion tecla_time INTERRUPCION(interna)==Timer 
048A:  GOTO   1D2
048B:  MOVF   78,W
048C:  MOVWF  2E
....................             //k_1=tecla();//recoge el valor de la funcion tecla 
....................            //  k_1=kbd_getc();//recoge el valor directamente de la funcion 
....................               
....................              if(DIR>16) 
048D:  MOVF   2A,W
048E:  SUBLW  10
048F:  BTFSC  03.0
0490:  GOTO   498
....................              LCD_PUTC("\f");//Limpia LCD  
0491:  MOVLW  1D
0492:  BSF    03.6
0493:  MOVWF  0D
0494:  MOVLW  00
0495:  MOVWF  0F
0496:  BCF    03.6
0497:  CALL   10D
....................               
....................               //Lectura ADC 
....................          set_adc_channel(0); //Selecciono canal RA0 
0498:  MOVLW  00
0499:  MOVWF  78
049A:  MOVF   1F,W
049B:  ANDLW  C3
049C:  IORWF  78,W
049D:  MOVWF  1F
....................          delay_ms(1);   //Llama retardo 1ms 
049E:  MOVLW  01
049F:  MOVWF  3D
04A0:  CALL   02A
....................          bits=read_adc();//Guarda el dato del sensor 
04A1:  BSF    1F.1
04A2:  BTFSC  1F.1
04A3:  GOTO   4A2
04A4:  BSF    03.5
04A5:  MOVF   1E,W
04A6:  BCF    03.5
04A7:  MOVWF  24
04A8:  MOVF   1E,W
04A9:  MOVWF  25
....................           
....................          temp=bits*0.4882;//conversion de bits a temperatura 
04AA:  MOVF   25,W
04AB:  MOVWF  30
04AC:  MOVF   24,W
04AD:  MOVWF  2F
04AE:  GOTO   1F5
04AF:  MOVF   7A,W
04B0:  MOVWF  3F
04B1:  MOVF   79,W
04B2:  MOVWF  3E
04B3:  MOVF   78,W
04B4:  MOVWF  3D
04B5:  MOVF   77,W
04B6:  MOVWF  3C
04B7:  MOVLW  5A
04B8:  MOVWF  43
04B9:  MOVLW  F5
04BA:  MOVWF  42
04BB:  MOVLW  79
04BC:  MOVWF  41
04BD:  MOVLW  7D
04BE:  MOVWF  40
04BF:  CALL   214
04C0:  MOVF   7A,W
04C1:  MOVWF  29
04C2:  MOVF   79,W
04C3:  MOVWF  28
04C4:  MOVF   78,W
04C5:  MOVWF  27
04C6:  MOVF   77,W
04C7:  MOVWF  26
....................          lcd_gotoxy(1,1);//Ubiquese en la posicion 1,1 
04C8:  MOVLW  01
04C9:  MOVWF  3D
04CA:  MOVWF  3E
04CB:  CALL   0CF
....................          printf(lcd_putc,"Temperatura: %f ",temp);//Muestra el valor numerico de la conversion 
04CC:  MOVLW  1E
04CD:  BSF    03.6
04CE:  MOVWF  0D
04CF:  MOVLW  00
04D0:  MOVWF  0F
04D1:  BCF    03.0
04D2:  MOVLW  0D
04D3:  BCF    03.6
04D4:  MOVWF  2F
04D5:  GOTO   289
04D6:  MOVLW  89
04D7:  MOVWF  04
04D8:  MOVF   29,W
04D9:  MOVWF  32
04DA:  MOVF   28,W
04DB:  MOVWF  31
04DC:  MOVF   27,W
04DD:  MOVWF  30
04DE:  MOVF   26,W
04DF:  MOVWF  2F
04E0:  MOVLW  02
04E1:  MOVWF  33
04E2:  GOTO   331
04E3:  MOVLW  20
04E4:  MOVWF  3C
04E5:  CALL   0E1
04E6:  GOTO   475
....................  
....................          }  
04E7:  GOTO   462
....................       } 
.................... } 
04E8:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
