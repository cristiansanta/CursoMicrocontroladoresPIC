CCS PCM C Compiler, Version 5.076, 56587               16-Sep-21 19:59

               Filename:   C:\Users\CRISTRONICOS\Documents\PROGRAMACIÓN-ELECTRÓNICA\2.uC PIC\LEARNING\6.DISPLAY 7 SEGMENTOS\DISPLAY_Pulsador\DISPLAY_PULSA.lst

               ROM used:   357 words (4%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           12 (3%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0D9
0003:  NOP
.................... #INCLUDE <16F887.H> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7D
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  67
0012:  DATA A5,3A
0013:  DATA 20,10
0014:  DATA 8A,06
0015:  DATA 80,0B
0016:  DATA A5,3A
0017:  DATA 20,10
0018:  DATA 8A,06
0019:  DATA 00,01
001A:  DATA A5,3A
001B:  DATA 20,10
001C:  DATA 8A,06
001D:  DATA 00,00
001E:  MOVF   25,W
001F:  CLRF   78
0020:  SUBWF  24,W
0021:  BTFSC  03.0
0022:  GOTO   026
0023:  MOVF   24,W
0024:  MOVWF  77
0025:  GOTO   032
0026:  CLRF   77
0027:  MOVLW  08
0028:  MOVWF  26
0029:  RLF    24,F
002A:  RLF    77,F
002B:  MOVF   25,W
002C:  SUBWF  77,W
002D:  BTFSC  03.0
002E:  MOVWF  77
002F:  RLF    78,F
0030:  DECFSZ 26,F
0031:  GOTO   029
0032:  RETURN
0033:  MOVF   78,W
0034:  MOVF   22,W
0035:  MOVWF  24
0036:  MOVLW  64
0037:  MOVWF  25
0038:  CALL   01E
0039:  MOVF   77,W
003A:  MOVWF  22
003B:  MOVF   78,W
003C:  MOVLW  30
003D:  BTFSS  03.2
003E:  GOTO   046
003F:  BTFSS  23.1
0040:  GOTO   04E
0041:  BTFSC  23.3
0042:  GOTO   04E
0043:  BTFSC  23.4
0044:  MOVLW  20
0045:  GOTO   049
0046:  BCF    23.3
0047:  BCF    23.4
0048:  BSF    23.0
0049:  ADDWF  78,F
004A:  MOVF   78,W
004B:  BTFSS  0C.4
004C:  GOTO   04B
004D:  MOVWF  19
004E:  MOVF   22,W
004F:  MOVWF  24
0050:  MOVLW  0A
0051:  MOVWF  25
0052:  CALL   01E
0053:  MOVF   77,W
0054:  MOVWF  22
0055:  MOVF   78,W
0056:  MOVLW  30
0057:  BTFSS  03.2
0058:  GOTO   05F
0059:  BTFSC  23.3
005A:  GOTO   064
005B:  BTFSS  23.0
005C:  GOTO   064
005D:  BTFSC  23.4
005E:  MOVLW  20
005F:  ADDWF  78,F
0060:  MOVF   78,W
0061:  BTFSS  0C.4
0062:  GOTO   061
0063:  MOVWF  19
0064:  MOVLW  30
0065:  ADDWF  22,F
0066:  MOVF   22,W
0067:  BTFSS  0C.4
0068:  GOTO   067
0069:  MOVWF  19
006A:  RETURN
006B:  MOVF   0B,W
006C:  MOVWF  23
006D:  BCF    0B.7
006E:  BSF    03.5
006F:  BSF    03.6
0070:  BSF    0C.7
0071:  BSF    0C.0
0072:  NOP
0073:  NOP
0074:  BCF    03.5
0075:  BCF    03.6
0076:  BTFSC  23.7
0077:  BSF    0B.7
0078:  BTFSC  03.0
0079:  GOTO   0A3
007A:  BSF    03.6
007B:  MOVF   0C,W
007C:  ANDLW  7F
007D:  BCF    03.6
007E:  MOVWF  23
007F:  BSF    03.6
0080:  MOVF   0D,W
0081:  BCF    03.6
0082:  MOVWF  24
0083:  BSF    03.6
0084:  MOVF   0F,W
0085:  BCF    03.6
0086:  MOVWF  25
0087:  MOVF   23,W
0088:  BTFSS  0C.4
0089:  GOTO   088
008A:  MOVWF  19
008B:  MOVF   24,W
008C:  BSF    03.6
008D:  MOVWF  0D
008E:  BCF    03.6
008F:  MOVF   25,W
0090:  BSF    03.6
0091:  MOVWF  0F
0092:  BCF    03.6
0093:  MOVF   0B,W
0094:  MOVWF  26
0095:  BCF    0B.7
0096:  BSF    03.5
0097:  BSF    03.6
0098:  BSF    0C.7
0099:  BSF    0C.0
009A:  NOP
009B:  NOP
009C:  BCF    03.5
009D:  BCF    03.6
009E:  BTFSC  26.7
009F:  BSF    0B.7
00A0:  DECFSZ 22,F
00A1:  GOTO   0A3
00A2:  GOTO   0C3
00A3:  BSF    03.6
00A4:  RLF    0C,W
00A5:  RLF    0E,W
00A6:  ANDLW  7F
00A7:  BCF    03.6
00A8:  MOVWF  23
00A9:  BSF    03.6
00AA:  MOVF   0D,W
00AB:  BCF    03.6
00AC:  MOVWF  24
00AD:  BSF    03.6
00AE:  MOVF   0F,W
00AF:  BCF    03.6
00B0:  MOVWF  25
00B1:  MOVF   23,W
00B2:  BTFSS  0C.4
00B3:  GOTO   0B2
00B4:  MOVWF  19
00B5:  MOVF   24,W
00B6:  BSF    03.6
00B7:  MOVWF  0D
00B8:  BCF    03.6
00B9:  MOVF   25,W
00BA:  BSF    03.6
00BB:  MOVWF  0F
00BC:  INCF   0D,F
00BD:  BTFSC  03.2
00BE:  INCF   0F,F
00BF:  BCF    03.0
00C0:  BCF    03.6
00C1:  DECFSZ 22,F
00C2:  GOTO   06B
00C3:  RETURN
....................  
.................... #list 
....................  
.................... #USE DELAY(CLOCK=4000000) 
00C4:  MOVLW  23
00C5:  MOVWF  04
00C6:  BCF    03.7
00C7:  MOVF   00,W
00C8:  BTFSC  03.2
00C9:  GOTO   0D8
00CA:  MOVLW  01
00CB:  MOVWF  78
00CC:  CLRF   77
00CD:  DECFSZ 77,F
00CE:  GOTO   0CD
00CF:  DECFSZ 78,F
00D0:  GOTO   0CC
00D1:  MOVLW  4A
00D2:  MOVWF  77
00D3:  DECFSZ 77,F
00D4:  GOTO   0D3
00D5:  GOTO   0D6
00D6:  DECFSZ 00,F
00D7:  GOTO   0CA
00D8:  RETURN
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
.................... #USE RS232(UART1,baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... byte const display[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67}; 
.................... #BYTE PORTB=6////direcciones de memoria 
.................... #BYTE PORTC=7////direcciones de memoria 
.................... #define switch1 PORTC,0//PIN cuatro del puerto D 
.................... #DEFINE switch2 PORTC,1//PIN cinco del puerto D 
.................... #define piloto PORTC,5 
.................... int Contador; 
....................  
.................... main() 
00D9:  MOVF   03,W
00DA:  ANDLW  1F
00DB:  MOVWF  03
00DC:  BSF    03.5
00DD:  BSF    03.6
00DE:  BCF    07.3
00DF:  MOVLW  19
00E0:  BCF    03.6
00E1:  MOVWF  19
00E2:  MOVLW  A6
00E3:  MOVWF  18
00E4:  MOVLW  90
00E5:  BCF    03.5
00E6:  MOVWF  18
00E7:  MOVLW  FF
00E8:  MOVWF  21
00E9:  BSF    03.5
00EA:  BSF    03.6
00EB:  MOVF   09,W
00EC:  ANDLW  C0
00ED:  MOVWF  09
00EE:  BCF    03.6
00EF:  BCF    1F.4
00F0:  BCF    1F.5
00F1:  MOVLW  00
00F2:  BSF    03.6
00F3:  MOVWF  08
00F4:  BCF    03.5
00F5:  CLRF   07
00F6:  CLRF   08
00F7:  CLRF   09
00F8:  BCF    03.7
.................... { 
....................   SET_TRIS_B(0B00000000);//SE CONFIGURAN TODOS COMO SALIDA 
00F9:  MOVLW  00
00FA:  BSF    03.5
00FB:  BCF    03.6
00FC:  MOVWF  06
....................   SET_TRIS_c(0B00000011);//SE CONFIGURAN TODOS COMO ENTRADA 
00FD:  MOVLW  03
00FE:  MOVWF  07
00FF:  BCF    03.5
0100:  MOVWF  21
....................   Contador=0; 
0101:  CLRF   20
....................    
....................   WHILE(true){ 
....................   PORTB=display[Contador]; 
0102:  MOVF   20,W
0103:  CALL   004
0104:  MOVWF  78
0105:  MOVWF  06
....................   BIT_CLEAR(piloto); 
0106:  BCF    07.5
....................   printf("%u  \n\r",Contador); 
0107:  MOVF   20,W
0108:  MOVWF  22
0109:  MOVLW  1B
010A:  MOVWF  23
010B:  CALL   033
010C:  MOVLW  13
010D:  BSF    03.6
010E:  MOVWF  0D
010F:  MOVLW  00
0110:  MOVWF  0F
0111:  BCF    03.0
0112:  MOVLW  04
0113:  BCF    03.6
0114:  MOVWF  22
0115:  CALL   06B
....................    
....................   IF(BIT_TEST(switch1)) 
0116:  BTFSS  07.0
0117:  GOTO   139
....................   { DELAY_MS(300); 
0118:  MOVLW  02
0119:  MOVWF  22
011A:  MOVLW  96
011B:  MOVWF  23
011C:  CALL   0C4
011D:  DECFSZ 22,F
011E:  GOTO   11A
....................     while(BIT_TEST(switch1)){}; 
011F:  BTFSC  07.0
0120:  GOTO   11F
....................     Contador++; 
0121:  INCF   20,F
....................     PORTB=display[Contador]; 
0122:  MOVF   20,W
0123:  CALL   004
0124:  MOVWF  78
0125:  MOVWF  06
....................     printf("%u  \n\r",Contador); 
0126:  MOVF   20,W
0127:  MOVWF  22
0128:  MOVLW  1B
0129:  MOVWF  23
012A:  CALL   033
012B:  MOVLW  17
012C:  BSF    03.6
012D:  MOVWF  0D
012E:  MOVLW  00
012F:  MOVWF  0F
0130:  BCF    03.0
0131:  MOVLW  04
0132:  BCF    03.6
0133:  MOVWF  22
0134:  CALL   06B
....................     if(Contador==10)//EL MAYOR(>=) QUE NO DEJA FUNCIONAR EL PROGRAMA 
0135:  MOVF   20,W
0136:  SUBLW  0A
0137:  BTFSC  03.2
....................     Contador=0; 
0138:  CLRF   20
....................   } 
....................    
....................   IF(BIT_TEST(switch2)) 
0139:  BTFSS  07.1
013A:  GOTO   163
....................   { DELAY_MS(300);      
013B:  MOVLW  02
013C:  MOVWF  22
013D:  MOVLW  96
013E:  MOVWF  23
013F:  CALL   0C4
0140:  DECFSZ 22,F
0141:  GOTO   13D
....................     BIT_SET(piloto); 
0142:  BSF    07.5
....................     while(Contador>0){ 
0143:  MOVF   20,F
0144:  BTFSC  03.2
0145:  GOTO   162
....................     Contador--; 
0146:  DECF   20,F
....................     PORTB=display[Contador]; 
0147:  MOVF   20,W
0148:  CALL   004
0149:  MOVWF  78
014A:  MOVWF  06
....................     printf("%u  \n\r",Contador); 
014B:  MOVF   20,W
014C:  MOVWF  22
014D:  MOVLW  1B
014E:  MOVWF  23
014F:  CALL   033
0150:  MOVLW  1B
0151:  BSF    03.6
0152:  MOVWF  0D
0153:  MOVLW  00
0154:  MOVWF  0F
0155:  BCF    03.0
0156:  MOVLW  04
0157:  BCF    03.6
0158:  MOVWF  22
0159:  CALL   06B
....................     DELAY_MS(300); 
015A:  MOVLW  02
015B:  MOVWF  22
015C:  MOVLW  96
015D:  MOVWF  23
015E:  CALL   0C4
015F:  DECFSZ 22,F
0160:  GOTO   15C
0161:  GOTO   143
....................      
....................   }BIT_CLEAR(piloto); 
0162:  BCF    07.5
....................   } 
0163:  GOTO   102
....................  } 
.................... } 
....................  
0164:  SLEEP
....................  

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
