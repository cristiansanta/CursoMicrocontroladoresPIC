CCS PCM C Compiler, Version 5.076, 56587               19-Sep-21 16:26

               Filename:   C:\Users\CRISTRONICOS\Documents\1PROGRAMACIÓN-ELECTRÓNICA\2.uC PIC\LEARNING\10.Teclado Matricial 4x3\Teclado_Telefónico Matricial 4x3.lst

               ROM used:   256 words (3%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           15 (4%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0A1
0003:  NOP
.................... #INCLUDE <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  34
000C:  RETLW  35
000D:  RETLW  36
000E:  RETLW  37
000F:  RETLW  38
0010:  RETLW  39
0011:  RETLW  2A
0012:  RETLW  30
0013:  RETLW  23
*
0067:  CLRF   77
0068:  CLRF   78
0069:  MOVF   28,W
006A:  BCF    03.0
006B:  BTFSC  29.0
006C:  ADDWF  77,F
006D:  RRF    77,F
006E:  RRF    78,F
006F:  BTFSC  29.1
0070:  ADDWF  77,F
0071:  RRF    77,F
0072:  RRF    78,F
0073:  BTFSC  29.2
0074:  ADDWF  77,F
0075:  RRF    77,F
0076:  RRF    78,F
0077:  BTFSC  29.3
0078:  ADDWF  77,F
0079:  RRF    77,F
007A:  RRF    78,F
007B:  BTFSC  29.4
007C:  ADDWF  77,F
007D:  RRF    77,F
007E:  RRF    78,F
007F:  BTFSC  29.5
0080:  ADDWF  77,F
0081:  RRF    77,F
0082:  RRF    78,F
0083:  BTFSC  29.6
0084:  ADDWF  77,F
0085:  RRF    77,F
0086:  RRF    78,F
0087:  BTFSC  29.7
0088:  ADDWF  77,F
0089:  RRF    77,F
008A:  RRF    78,F
*
00F2:  BCF    0A.0
00F3:  BCF    0A.1
00F4:  BCF    0A.2
00F5:  ADDWF  02,F
00F6:  GOTO   0D3
00F7:  GOTO   0D6
00F8:  GOTO   0D9
00F9:  GOTO   0DC
00FA:  GOTO   0DF
00FB:  GOTO   0E2
00FC:  GOTO   0E5
00FD:  GOTO   0E8
00FE:  GOTO   0EB
00FF:  GOTO   0EE
....................  
.................... #list 
....................  
.................... //#USE DELAY(CLOCK=4000000) 
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
.................... #USE DELAY(CLOCK=4000000,crystal)//Crystal Externo 4MHz 
.................... //#USE RS232(UART1,baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... Byte const Display[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67}; 
.................... #DEFINE USE_PORTB_KBD //Se va a utilizar un teclado 
.................... #INCLUDE <KBD.C> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc()  Will return a key value if pressed or /0 if not  //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
0014:  BCF    0A.3
0015:  BCF    0A.4
0016:  GOTO   0C1 (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
00B6:  BCF    03.6
00B7:  CLRF   20
....................    static int1 kbd_down; 
00B8:  BCF    21.0
....................    static char last_key; 
00B9:  CLRF   22
....................    static BYTE col; 
00BA:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
0017:  CLRF   26
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
0018:  INCF   20,F
0019:  MOVF   20,W
001A:  SUBLW  21
001B:  BTFSC  03.0
001C:  GOTO   098
....................        switch (col) { 
001D:  MOVF   23,W
001E:  BTFSC  03.2
001F:  GOTO   027
0020:  XORLW  01
0021:  BTFSC  03.2
0022:  GOTO   02D
0023:  XORLW  03
0024:  BTFSC  03.2
0025:  GOTO   033
0026:  GOTO   038
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
0027:  MOVLW  DE
0028:  BSF    03.5
0029:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
002A:  BCF    03.5
002B:  MOVWF  06
....................                     break; 
002C:  GOTO   038
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
002D:  MOVLW  BE
002E:  BSF    03.5
002F:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0030:  BCF    03.5
0031:  MOVWF  06
....................                     break; 
0032:  GOTO   038
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0033:  MOVLW  7E
0034:  BSF    03.5
0035:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
0036:  BCF    03.5
0037:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
0038:  BTFSS  21.0
0039:  GOTO   044
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
003A:  MOVF   06,W
003B:  ANDLW  1E
003C:  SUBLW  1E
003D:  BTFSS  03.2
003E:  GOTO   043
....................            kbd_down=FALSE; 
003F:  BCF    21.0
....................            kchar=last_key; 
0040:  MOVF   22,W
0041:  MOVWF  26
....................            last_key='\0'; 
0042:  CLRF   22
....................          } 
....................        } else { 
0043:  GOTO   097
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0044:  MOVF   06,W
0045:  ANDLW  1E
0046:  SUBLW  1E
0047:  BTFSC  03.2
0048:  GOTO   092
....................              if((kbd & ROW0)==0) 
0049:  MOVF   06,W
004A:  ANDLW  02
004B:  BTFSS  03.2
004C:  GOTO   04F
....................                row=0; 
004D:  CLRF   27
004E:  GOTO   063
....................              else if((kbd & ROW1)==0) 
004F:  MOVF   06,W
0050:  ANDLW  04
0051:  BTFSS  03.2
0052:  GOTO   056
....................                row=1; 
0053:  MOVLW  01
0054:  MOVWF  27
0055:  GOTO   063
....................              else if((kbd & ROW2)==0) 
0056:  MOVF   06,W
0057:  ANDLW  08
0058:  BTFSS  03.2
0059:  GOTO   05D
....................                row=2; 
005A:  MOVLW  02
005B:  MOVWF  27
005C:  GOTO   063
....................              else if((kbd & ROW3)==0) 
005D:  MOVF   06,W
005E:  ANDLW  10
005F:  BTFSS  03.2
0060:  GOTO   063
....................                row=3; 
0061:  MOVLW  03
0062:  MOVWF  27
....................              last_key =KEYS[row][col]; 
0063:  MOVF   27,W
0064:  MOVWF  28
0065:  MOVLW  03
0066:  MOVWF  29
*
008B:  MOVF   23,W
008C:  ADDWF  78,W
008D:  CALL   004
008E:  MOVWF  78
008F:  MOVWF  22
....................              kbd_down = TRUE; 
0090:  BSF    21.0
....................           } else { 
0091:  GOTO   097
....................              ++col; 
0092:  INCF   23,F
....................              if(col==3) 
0093:  MOVF   23,W
0094:  SUBLW  03
0095:  BTFSC  03.2
....................                col=0; 
0096:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
0097:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
0098:  MOVLW  FE
0099:  BSF    03.5
009A:  MOVWF  06
....................   return(kchar); 
009B:  BCF    03.5
009C:  MOVF   26,W
009D:  MOVWF  78
009E:  BCF    0A.3
009F:  BCF    0A.4
00A0:  GOTO   0CA (RETURN)
.................... } 
....................  
.................... #BYTE PORTC= 7 
.................... #BYTE PORTB= 6 
.................... //PARA CONFIGURAR RESISTENCIAS INTERNAS EN EL uC 16F887 
.................... #BYTE WPUB= 0X95 //eclarar registro option 
.................... #BYTE OPTION_REG= 0X81 
....................  
.................... char K;//Almacenar la informacion obtenida del teclado telefonico 
....................  
.................... void main() 
00A1:  MOVF   03,W
00A2:  ANDLW  1F
00A3:  MOVWF  03
00A4:  MOVLW  FF
00A5:  MOVWF  25
00A6:  BSF    03.5
00A7:  BSF    03.6
00A8:  MOVF   09,W
00A9:  ANDLW  C0
00AA:  MOVWF  09
00AB:  BCF    03.6
00AC:  BCF    1F.4
00AD:  BCF    1F.5
00AE:  MOVLW  00
00AF:  BSF    03.6
00B0:  MOVWF  08
00B1:  BCF    03.5
00B2:  CLRF   07
00B3:  CLRF   08
00B4:  CLRF   09
00B5:  BCF    03.7
.................... { 
....................  //PORT_B_PULLUPS(TRUE);//PARA EL 16F887 NO SIRVE ESTA INSTRUCCION //Habilitar resistencias internas de los 1ros 4 puertos de RB 
....................  OPTION_REG = 0;//En el main se desactiva el registro OPTION 
*
00BB:  BSF    03.5
00BC:  CLRF   01
....................  WPUB=0B11111111;// y se seleccionan los PULLUPS que se van a utilizar 
00BD:  MOVLW  FF
00BE:  MOVWF  15
....................  KBD_INIT();//inicializar funcion de la libreria KBD.C para el teclado 
00BF:  BCF    03.5
00C0:  GOTO   014
....................  SET_TRIS_C(0);//Configurar el puerto C como salida 
00C1:  MOVLW  00
00C2:  BSF    03.5
00C3:  MOVWF  07
00C4:  BCF    03.5
00C5:  MOVWF  25
....................  PORTC=(DISPLAY[0]); 
00C6:  MOVLW  3F
00C7:  MOVWF  07
....................  while(true) 
....................  {  
....................    K=0; 
00C8:  CLRF   24
....................    K=KBD_GETC();//Captura cualquier tecla presionada 
00C9:  GOTO   017
00CA:  MOVF   78,W
00CB:  MOVWF  24
....................   // printf("%c",K); 
....................    switch(K) 
00CC:  MOVLW  30
00CD:  SUBWF  24,W
00CE:  ADDLW  F6
00CF:  BTFSC  03.0
00D0:  GOTO   0F0
00D1:  ADDLW  0A
00D2:  GOTO   0F2
....................    {  
....................      case '0'://Tecla presionada = al caracter 
....................      PORTC=(DISPLAY[0]);break;//Muestre en el display el numero cero 
00D3:  MOVLW  3F
00D4:  MOVWF  07
00D5:  GOTO   0F0
....................      case '1': 
....................      PORTC=(DISPLAY[1]);break; 
00D6:  MOVLW  06
00D7:  MOVWF  07
00D8:  GOTO   0F0
....................      case '2': 
....................      PORTC=(DISPLAY[2]);break; 
00D9:  MOVLW  5B
00DA:  MOVWF  07
00DB:  GOTO   0F0
....................      case '3': 
....................      PORTC=(DISPLAY[3]);break; 
00DC:  MOVLW  4F
00DD:  MOVWF  07
00DE:  GOTO   0F0
....................      case '4': 
....................      PORTC=(DISPLAY[4]);break; 
00DF:  MOVLW  66
00E0:  MOVWF  07
00E1:  GOTO   0F0
....................      case '5': 
....................      PORTC=(DISPLAY[5]);break; 
00E2:  MOVLW  6D
00E3:  MOVWF  07
00E4:  GOTO   0F0
....................      case '6': 
....................      PORTC=(DISPLAY[6]);break; 
00E5:  MOVLW  7D
00E6:  MOVWF  07
00E7:  GOTO   0F0
....................      case '7': 
....................      PORTC=(DISPLAY[7]);break; 
00E8:  MOVLW  07
00E9:  MOVWF  07
00EA:  GOTO   0F0
....................      case '8': 
....................      PORTC=(DISPLAY[8]);break; 
00EB:  MOVLW  7F
00EC:  MOVWF  07
00ED:  GOTO   0F0
....................      case '9': 
....................      PORTC=(DISPLAY[9]);break; 
00EE:  MOVLW  67
00EF:  MOVWF  07
....................    } 
00F0:  GOTO   0C8
....................  } 
.................... } 
00F1:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
