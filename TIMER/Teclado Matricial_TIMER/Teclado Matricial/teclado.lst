CCS PCM C Compiler, Version 4.130, 60802               20-nov-18 11:53

               Filename: D:\FABIO\ASENA\2018\Curso Progrmacion C Microcontroladores\Codigos\Teclado Matricial\teclado.lst

               ROM used: 399 words (10%)
                         Largest free fragment is 2048
               RAM used: 18 (5%) at main() level
                         22 (6%) worst case
               Stack:    4 worst case (1 in main + 3 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   161
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.3
001B:  GOTO   01E
001C:  BTFSC  0B.0
001D:  GOTO   035
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.0
0021:  GOTO   024
0022:  BTFSC  0C.0
0023:  GOTO   037
0024:  MOVF   22,W
0025:  MOVWF  04
0026:  MOVF   23,W
0027:  MOVWF  77
0028:  MOVF   24,W
0029:  MOVWF  78
002A:  MOVF   25,W
002B:  MOVWF  79
002C:  MOVF   26,W
002D:  MOVWF  7A
002E:  MOVF   27,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
0035:  BCF    0A.3
0036:  GOTO   12B
0037:  BCF    0A.3
0038:  GOTO   159
.................... #include <16F88.h> 
.................... //////// Standard Header file for the PIC16F88 device //////////////// 
.................... #device PIC16F88 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES PROTECT                  //Code protected from reads 
....................  
.................... #use delay(int=8000000) 
*
0141:  MOVLW  2E
0142:  MOVWF  04
0143:  BCF    03.7
0144:  MOVF   00,W
0145:  BTFSC  03.2
0146:  GOTO   154
0147:  MOVLW  02
0148:  MOVWF  78
0149:  CLRF   77
014A:  DECFSZ 77,F
014B:  GOTO   14A
014C:  DECFSZ 78,F
014D:  GOTO   149
014E:  MOVLW  97
014F:  MOVWF  77
0150:  DECFSZ 77,F
0151:  GOTO   150
0152:  DECFSZ 00,F
0153:  GOTO   147
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B5,rcv=PIN_B2,bits=8,stream=PORT1,errors) 
....................  
.................... //---------- libreria teclado 
....................  
.................... #define col0 PIN_B4   // Obligatorio para procesar por interrupcion 
.................... #define col1 PIN_B6   // Obligatorio para procesar por interrupcion 
.................... #define col2 PIN_B7  // Obligatorio para procesar por interrupcion 
.................... #define row0 PIN_B0  // pin opcional, elegir cualquiera 
.................... #define row1 PIN_B1  // pin opcional, elegir cualquiera 
.................... #define row2 PIN_B3  // pin opcional, elegir cualquiera 
.................... #define row3 PIN_A0  // pin opcional, elegir cualquiera 
....................  
.................... #include "key4x3.c"   // archivo localizado al lado de nuestro .c 
.................... ///////////////////////////////////////////////////////////////////////////  
.................... ////                             Flex_KBD.C                            ////  
.................... ////                  Generic keypad scan driver                       ////  
.................... ////                                                                   ////  
.................... ////  kbd_init()   Must be called before any other function.           ////  
.................... ////                                                                   ////  
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not ////  
.................... ////                   This function should be called frequently so as ////  
.................... ////                   not to miss a key press.                        ////  
.................... ////                                                                   ////  
.................... ///////////////////////////////////////////////////////////////////////////  
....................  
....................  
.................... #byte  status = getenv("SFR:STATUS") 
.................... #bit RP0=GETENV("BIT:RP0") 
.................... #bit RP1=GETENV("BIT:RP1") 
....................  
....................  
....................   
....................  
....................  
....................  
.................... //Keypad connection:   
....................  
.................... //#define col0 PIN_B4   // Obligatorio para procesar por interrupcion 
.................... //#define col1 PIN_B5   // Obligatorio para procesar por interrupcion 
.................... //#define col2 PIN_B6  // Obligatorio para procesar por interrupcion 
.................... //#define row0 PIN_E0  // pin opcional, elegir cualquiera 
.................... //#define row1 PIN_C2  // pin opcional, elegir cualquiera 
.................... //#define row2 PIN_C1  // pin opcional, elegir cualquiera 
.................... //#define row3 PIN_E2  // pin opcional, elegir cualquiera 
....................  
.................... // Keypad layout:  
.................... char const KEYS[4][3] = {{'1','2','3'},  
....................                          {'4','5','6'},  
....................                          {'7','8','9'},  
....................                          {'*','0','#'}};  
....................  
....................  
....................  
.................... void kbd_init() {     
....................      input(col0); 
*
0068:  BSF    03.5
0069:  BSF    06.4
....................      input(col1); 
006A:  BSF    06.6
....................      input(col2); 
006B:  BSF    06.7
....................      output_low(row0); 
006C:  BCF    06.0
006D:  BCF    03.5
006E:  BCF    06.0
....................      output_low(row1); 
006F:  BSF    03.5
0070:  BCF    06.1
0071:  BCF    03.5
0072:  BCF    06.1
....................      output_low(row2); 
0073:  BSF    03.5
0074:  BCF    06.3
0075:  BCF    03.5
0076:  BCF    06.3
....................      output_low(row3);  
0077:  BSF    03.5
0078:  BCF    05.0
0079:  BCF    03.5
007A:  BCF    05.0
....................      port_b_pullups(TRUE); // habilita pull up  
007B:  BSF    03.5
007C:  BCF    01.7
....................      enable_interrupts(INT_RB);// Habilita interrupcion Rb4-Rb7 
007D:  BCF    03.5
007E:  BSF    0B.3
.................... }  
007F:  RETURN
....................  
.................... short int kbd_Presionado (void)  
.................... {  
....................    if (input (col0) & input (col1) & input (col2) )  
*
0049:  BSF    03.5
004A:  BSF    06.4
004B:  MOVLW  00
004C:  BCF    03.5
004D:  BTFSC  06.4
004E:  MOVLW  01
004F:  MOVWF  2E
0050:  BSF    03.5
0051:  BSF    06.6
0052:  MOVLW  00
0053:  BCF    03.5
0054:  BTFSC  06.6
0055:  MOVLW  01
0056:  ANDWF  2E,F
0057:  BSF    03.5
0058:  BSF    06.7
0059:  MOVLW  00
005A:  BCF    03.5
005B:  BTFSC  06.7
005C:  MOVLW  01
005D:  ANDWF  2E,W
005E:  BTFSC  03.2
005F:  GOTO   064
....................       return (0);  //  no presionado 
0060:  MOVLW  00
0061:  MOVWF  78
0062:  GOTO   067
....................    else  
0063:  GOTO   067
....................       return (1);  // teclas presionada 
0064:  MOVLW  01
0065:  MOVWF  78
0066:  GOTO   067
.................... } 
0067:  RETURN
....................  
.................... char kbd_getc( ) {  
....................    static byte row,col;  
*
017B:  BCF    03.5
017C:  CLRF   2A
017D:  CLRF   2B
....................    char kchar; 
....................    kchar=0; // Retorna 0 si no no hay presionada    
*
0080:  CLRF   2E
....................    col =10; // sino encuentra 
0081:  MOVLW  0A
0082:  MOVWF  2B
....................     
....................    for(row=0;row<=4;row++) { // inicia escaneo de filas 
0083:  CLRF   2A
0084:  MOVF   2A,W
0085:  SUBLW  04
0086:  BTFSS  03.0
0087:  GOTO   0ED
....................     
....................        switch (row) {  
0088:  MOVF   2A,W
0089:  ADDLW  FC
008A:  BTFSC  03.0
008B:  GOTO   0D2
008C:  ADDLW  04
008D:  GOTO   123
....................          case 0  :  
....................                output_low(row0); 
008E:  BSF    03.5
008F:  BCF    06.0
0090:  BCF    03.5
0091:  BCF    06.0
....................                output_high(row1);  
0092:  BSF    03.5
0093:  BCF    06.1
0094:  BCF    03.5
0095:  BSF    06.1
....................                output_high(row2);  
0096:  BSF    03.5
0097:  BCF    06.3
0098:  BCF    03.5
0099:  BSF    06.3
....................                output_high(row3); 
009A:  BSF    03.5
009B:  BCF    05.0
009C:  BCF    03.5
009D:  BSF    05.0
....................                     break;  
009E:  GOTO   0D2
....................          case 1   :  
....................                output_high(row0); 
009F:  BSF    03.5
00A0:  BCF    06.0
00A1:  BCF    03.5
00A2:  BSF    06.0
....................                output_low(row1);  
00A3:  BSF    03.5
00A4:  BCF    06.1
00A5:  BCF    03.5
00A6:  BCF    06.1
....................                output_high(row2);  
00A7:  BSF    03.5
00A8:  BCF    06.3
00A9:  BCF    03.5
00AA:  BSF    06.3
....................                output_high(row3);  
00AB:  BSF    03.5
00AC:  BCF    05.0
00AD:  BCF    03.5
00AE:  BSF    05.0
....................                     break;  
00AF:  GOTO   0D2
....................          case 2   :  
....................                output_high(row0); 
00B0:  BSF    03.5
00B1:  BCF    06.0
00B2:  BCF    03.5
00B3:  BSF    06.0
....................                output_high(row1);  
00B4:  BSF    03.5
00B5:  BCF    06.1
00B6:  BCF    03.5
00B7:  BSF    06.1
....................                output_low(row2);  
00B8:  BSF    03.5
00B9:  BCF    06.3
00BA:  BCF    03.5
00BB:  BCF    06.3
....................                output_high(row3);  
00BC:  BSF    03.5
00BD:  BCF    05.0
00BE:  BCF    03.5
00BF:  BSF    05.0
....................                     break;  
00C0:  GOTO   0D2
....................          case 3   :  
....................                output_high(row0); 
00C1:  BSF    03.5
00C2:  BCF    06.0
00C3:  BCF    03.5
00C4:  BSF    06.0
....................                output_high(row1);  
00C5:  BSF    03.5
00C6:  BCF    06.1
00C7:  BCF    03.5
00C8:  BSF    06.1
....................                output_high(row2);  
00C9:  BSF    03.5
00CA:  BCF    06.3
00CB:  BCF    03.5
00CC:  BSF    06.3
....................                output_low(row3);  
00CD:  BSF    03.5
00CE:  BCF    05.0
00CF:  BCF    03.5
00D0:  BCF    05.0
....................                     break;             
00D1:  GOTO   0D2
....................        }  
....................  
....................       //------------- verifica columna presionada 
....................          
....................              if(!input (col0)) { 
00D2:  BSF    03.5
00D3:  BSF    06.4
00D4:  BCF    03.5
00D5:  BTFSC  06.4
00D6:  GOTO   0DA
....................                 col=0; //tecla encpntrada en columna 0 
00D7:  CLRF   2B
....................                 break;  
00D8:  GOTO   0ED
....................              }else if(!input (col1)) { 
00D9:  GOTO   0EB
00DA:  BSF    03.5
00DB:  BSF    06.6
00DC:  BCF    03.5
00DD:  BTFSC  06.6
00DE:  GOTO   0E3
....................                 col=1; //tecla encpntrada en columna 1 
00DF:  MOVLW  01
00E0:  MOVWF  2B
....................                 break;  
00E1:  GOTO   0ED
....................              }else if(!input (col2)) { 
00E2:  GOTO   0EB
00E3:  BSF    03.5
00E4:  BSF    06.7
00E5:  BCF    03.5
00E6:  BTFSC  06.7
00E7:  GOTO   0EB
....................                 col=2; //tecla encpntrada en columna 2 
00E8:  MOVLW  02
00E9:  MOVWF  2B
....................                 break;  
00EA:  GOTO   0ED
....................              }            
....................             
....................    }  
00EB:  INCF   2A,F
00EC:  GOTO   084
....................     
....................     kbd_init(); // espera proxima tecla 
00ED:  CALL   068
....................    if (col!=10){ kchar =KEYS[row][col]; } 
00EE:  MOVF   2B,W
00EF:  SUBLW  0A
00F0:  BTFSC  03.2
00F1:  GOTO   11F
00F2:  MOVF   2A,W
00F3:  MOVWF  2F
00F4:  MOVLW  03
00F5:  MOVWF  30
*
011A:  MOVF   2B,W
011B:  ADDWF  78,W
011C:  CALL   039
011D:  MOVWF  78
011E:  MOVWF  2E
....................   return kchar;  
011F:  MOVF   2E,W
0120:  MOVWF  78
.................... } 
0121:  BCF    0A.3
0122:  GOTO   131 (RETURN)
....................  
....................  
.................... #define Ledestado Pin_A1 
....................  
.................... #byte  portb = getenv("SFR:PORTB") 
....................  
.................... int8 aux; 
....................  
....................  
.................... #int_RB 
.................... void  RB_isr(void)  
.................... {  // gestion del teclado 
....................    char key; 
....................    // if no hay tecla presiona salgo 
....................     clear_interrupt(int_RB); 
*
012B:  BCF    0B.0
....................    if (!kbd_Presionado()){return;} 
012C:  CALL   049
012D:  MOVF   78,F
012E:  BTFSC  03.2
012F:  GOTO   156
....................     
....................    //---------- esta presionada 
....................    key=kbd_getc(); 
0130:  GOTO   080
0131:  MOVF   78,W
0132:  MOVWF  2D
....................     
....................    // envio dato por uart 
....................     putc(key); 
0133:  MOVF   2D,W
0134:  BTFSS  0C.4
0135:  GOTO   134
0136:  MOVWF  19
....................     putc(13);  //  envio enter 
0137:  MOVLW  0D
0138:  BTFSS  0C.4
0139:  GOTO   138
013A:  MOVWF  19
....................      
....................      
....................     while(kbd_Presionado()){ 
013B:  CALL   049
013C:  MOVF   78,F
013D:  BTFSC  03.2
013E:  GOTO   155
....................       delay_ms(10); 
013F:  MOVLW  0A
0140:  MOVWF  2E
....................     } 
*
0154:  GOTO   13B
....................      
....................     clear_interrupt(int_RB); 
0155:  BCF    0B.0
....................  
.................... } 
....................  
0156:  BCF    0B.0
0157:  BCF    0A.3
0158:  GOTO   024
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... {  output_toggle(Ledestado); 
0159:  BSF    03.5
015A:  BCF    05.1
015B:  MOVLW  02
015C:  BCF    03.5
015D:  XORWF  05,F
....................  
.................... } 
....................  
....................  
....................  
015E:  BCF    0C.0
015F:  BCF    0A.3
0160:  GOTO   024
.................... void main() 
.................... { 
0161:  CLRF   04
0162:  BCF    03.7
0163:  MOVLW  1F
0164:  ANDWF  03,F
0165:  MOVLW  72
0166:  BSF    03.5
0167:  MOVWF  0F
0168:  MOVF   0F,W
0169:  BCF    03.5
016A:  CLRF   29
016B:  MOVLW  0C
016C:  BSF    03.5
016D:  MOVWF  19
016E:  MOVLW  A2
016F:  MOVWF  18
0170:  MOVLW  90
0171:  BCF    03.5
0172:  MOVWF  18
0173:  BSF    03.5
0174:  BCF    1F.4
0175:  BCF    1F.5
0176:  MOVF   1B,W
0177:  ANDLW  80
0178:  MOVWF  1B
0179:  MOVLW  07
017A:  MOVWF  1C
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //262 ms overflow 
*
017E:  MOVLW  B5
017F:  MOVWF  10
....................  
....................    //---------------- configurar modulos 
....................      kbd_init();   // inicio teclado 4x3 
0180:  CALL   068
....................       
....................  
....................    enable_interrupts(INT_RB); 
0181:  BSF    0B.3
....................    aux= portb;   // para evitar eror de Rb4-Rb7 
0182:  MOVF   06,W
0183:  MOVWF  2C
....................    enable_interrupts(INT_TIMER1); 
0184:  BSF    03.5
0185:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
0186:  MOVLW  C0
0187:  BCF    03.5
0188:  IORWF  0B,F
....................    setup_oscillator(OSC_8MHZ|OSC_INTRC); 
0189:  MOVLW  72
018A:  BSF    03.5
018B:  MOVWF  0F
018C:  MOVF   0F,W
....................  
....................    while(TRUE) 
....................    { 
....................       //TODO: User Code 
....................    } 
018D:  GOTO   18D
....................  
.................... } 
018E:  SLEEP

Configuration Fuses:
   Word  1: 1F30   NOWDT PUT INTRC_IO MCLR NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 PROTECT
   Word  2: 3FFF   FCMEN IESO
