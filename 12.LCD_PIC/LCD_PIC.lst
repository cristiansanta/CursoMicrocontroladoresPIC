CCS PCM C Compiler, Version 5.076, 56587               19-Sep-21 21:21

               Filename:   C:\Users\CRISTRONICOS\Documents\1PROGRAMACIÓN-ELECTRÓNICA\2.uC PIC\LEARNING\12.LCD_PIC\LCD_PIC.lst

               ROM used:   463 words (6%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           22 (6%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   18D
0003:  NOP
.................... #include<16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  RETLW  43
0005:  RETLW  72
0006:  RETLW  69
0007:  RETLW  73
0008:  RETLW  74
0009:  RETLW  69
000A:  RETLW  61
000B:  RETLW  6E
000C:  RETLW  20
000D:  RETLW  41
000E:  RETLW  6E
000F:  RETLW  64
0010:  RETLW  72
0011:  RETLW  65
0012:  RETLW  73
0013:  RETLW  20
0014:  RETLW  43
0015:  RETLW  61
0016:  RETLW  6C
0017:  RETLW  61
0018:  RETLW  6D
0019:  RETLW  62
001A:  RETLW  61
001B:  RETLW  73
001C:  RETLW  20
001D:  RETLW  53
001E:  RETLW  61
001F:  RETLW  6E
0020:  RETLW  74
0021:  RETLW  61
0022:  RETLW  00
0023:  DATA 0C,00
*
0107:  MOVF   0B,W
0108:  MOVWF  24
0109:  BCF    0B.7
010A:  BSF    03.5
010B:  BSF    03.6
010C:  BSF    0C.7
010D:  BSF    0C.0
010E:  NOP
010F:  NOP
0110:  BCF    03.5
0111:  BCF    03.6
0112:  BTFSC  24.7
0113:  BSF    0B.7
0114:  BSF    03.6
0115:  MOVF   0C,F
0116:  BTFSC  03.2
0117:  GOTO   131
0118:  MOVF   0D,W
0119:  BCF    03.6
011A:  MOVWF  24
011B:  BSF    03.6
011C:  MOVF   0F,W
011D:  BCF    03.6
011E:  MOVWF  25
011F:  BSF    03.6
0120:  MOVF   0C,W
0121:  BCF    03.6
0122:  MOVWF  27
0123:  CALL   0DB
0124:  MOVF   24,W
0125:  BSF    03.6
0126:  MOVWF  0D
0127:  BCF    03.6
0128:  MOVF   25,W
0129:  BSF    03.6
012A:  MOVWF  0F
012B:  INCF   0D,F
012C:  BTFSC  03.2
012D:  INCF   0F,F
012E:  BCF    03.6
012F:  GOTO   107
0130:  BSF    03.6
0131:  BCF    03.6
0132:  BCF    0A.3
0133:  BCF    0A.4
0134:  GOTO   1B4 (RETURN)
0135:  MOVF   0B,W
0136:  MOVWF  24
0137:  BCF    0B.7
0138:  BSF    03.5
0139:  BSF    03.6
013A:  BSF    0C.7
013B:  BSF    0C.0
013C:  NOP
013D:  NOP
013E:  BCF    03.5
013F:  BCF    03.6
0140:  BTFSC  24.7
0141:  BSF    0B.7
0142:  BSF    03.6
0143:  MOVF   0C,W
0144:  ANDLW  7F
0145:  BTFSC  03.2
0146:  GOTO   189
0147:  BCF    03.6
0148:  MOVWF  24
0149:  BSF    03.6
014A:  MOVF   0D,W
014B:  BCF    03.6
014C:  MOVWF  25
014D:  BSF    03.6
014E:  MOVF   0F,W
014F:  BCF    03.6
0150:  MOVWF  26
0151:  MOVF   24,W
0152:  MOVWF  27
0153:  CALL   0DB
0154:  MOVF   25,W
0155:  BSF    03.6
0156:  MOVWF  0D
0157:  BCF    03.6
0158:  MOVF   26,W
0159:  BSF    03.6
015A:  MOVWF  0F
015B:  BCF    03.6
015C:  MOVF   0B,W
015D:  MOVWF  27
015E:  BCF    0B.7
015F:  BSF    03.5
0160:  BSF    03.6
0161:  BSF    0C.7
0162:  BSF    0C.0
0163:  NOP
0164:  NOP
0165:  BCF    03.5
0166:  BCF    03.6
0167:  BTFSC  27.7
0168:  BSF    0B.7
0169:  BSF    03.6
016A:  RLF    0C,W
016B:  RLF    0E,W
016C:  ANDLW  7F
016D:  BTFSC  03.2
016E:  GOTO   189
016F:  BCF    03.6
0170:  MOVWF  24
0171:  BSF    03.6
0172:  MOVF   0D,W
0173:  BCF    03.6
0174:  MOVWF  25
0175:  BSF    03.6
0176:  MOVF   0F,W
0177:  BCF    03.6
0178:  MOVWF  26
0179:  MOVF   24,W
017A:  MOVWF  27
017B:  CALL   0DB
017C:  MOVF   25,W
017D:  BSF    03.6
017E:  MOVWF  0D
017F:  BCF    03.6
0180:  MOVF   26,W
0181:  BSF    03.6
0182:  MOVWF  0F
0183:  INCF   0D,F
0184:  BTFSC  03.2
0185:  INCF   0F,F
0186:  BCF    03.6
0187:  GOTO   135
0188:  BSF    03.6
0189:  BCF    03.6
018A:  BCF    0A.3
018B:  BCF    0A.4
018C:  GOTO   1CD (RETURN)
....................  
.................... #list 
....................  
.................... #fuses XT,NOPROTECT,NOWRT,NOPUT,NOWDT,NOLVP,NOCPD //ORDENES PARA EL PROGRAMADOR 
.................... #use delay(clock=4000000) 
*
0024:  MOVLW  29
0025:  MOVWF  04
0026:  BCF    03.7
0027:  MOVF   00,W
0028:  BTFSC  03.2
0029:  GOTO   038
002A:  MOVLW  01
002B:  MOVWF  78
002C:  CLRF   77
002D:  DECFSZ 77,F
002E:  GOTO   02D
002F:  DECFSZ 78,F
0030:  GOTO   02C
0031:  MOVLW  4A
0032:  MOVWF  77
0033:  DECFSZ 77,F
0034:  GOTO   033
0035:  GOTO   036
0036:  DECFSZ 00,F
0037:  GOTO   02A
0038:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0051:  MOVLW  0F
0052:  BSF    03.5
0053:  ANDWF  08,W
0054:  IORLW  F0
0055:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0056:  BCF    03.5
0057:  BSF    08.2
....................    delay_cycles(1); 
0058:  NOP
....................    lcd_output_enable(1); 
0059:  BSF    08.0
....................    delay_cycles(1); 
005A:  NOP
....................    high = lcd_read_nibble(); 
005B:  CALL   045
005C:  MOVF   78,W
005D:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
005E:  BCF    08.0
....................    delay_cycles(1); 
005F:  NOP
....................    lcd_output_enable(1); 
0060:  BSF    08.0
....................    delay_us(1); 
0061:  NOP
....................    low = lcd_read_nibble(); 
0062:  CALL   045
0063:  MOVF   78,W
0064:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
0065:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0066:  MOVLW  0F
0067:  BSF    03.5
0068:  ANDWF  08,W
0069:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
006A:  BCF    03.5
006B:  SWAPF  2F,W
006C:  MOVWF  77
006D:  MOVLW  F0
006E:  ANDWF  77,F
006F:  MOVF   77,W
0070:  IORWF  2E,W
0071:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0045:  MOVF   08,W
0046:  MOVWF  77
0047:  SWAPF  08,W
0048:  ANDLW  0F
0049:  MOVWF  78
....................   #endif 
004A:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0039:  SWAPF  2F,W
003A:  ANDLW  F0
003B:  MOVWF  77
003C:  MOVLW  0F
003D:  ANDWF  08,W
003E:  IORWF  77,W
003F:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0040:  NOP
....................    lcd_output_enable(1); 
0041:  BSF    08.0
....................    delay_us(2); 
0042:  GOTO   043
....................    lcd_output_enable(0); 
0043:  BCF    08.0
0044:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
004B:  BSF    03.5
004C:  BCF    08.0
....................    lcd_rs_tris(); 
004D:  BCF    08.1
....................    lcd_rw_tris(); 
004E:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
004F:  BCF    03.5
0050:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0072:  MOVF   78,W
0073:  MOVWF  2E
0074:  BTFSC  2E.7
0075:  GOTO   051
....................    lcd_output_rs(address); 
0076:  BTFSS  2C.0
0077:  BCF    08.1
0078:  BTFSC  2C.0
0079:  BSF    08.1
....................    delay_cycles(1); 
007A:  NOP
....................    lcd_output_rw(0); 
007B:  BCF    08.2
....................    delay_cycles(1); 
007C:  NOP
....................    lcd_output_enable(0); 
007D:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
007E:  SWAPF  2D,W
007F:  MOVWF  2E
0080:  MOVLW  0F
0081:  ANDWF  2E,F
0082:  MOVF   2E,W
0083:  MOVWF  2F
0084:  CALL   039
....................    lcd_send_nibble(n & 0xf); 
0085:  MOVF   2D,W
0086:  ANDLW  0F
0087:  MOVWF  2E
0088:  MOVWF  2F
0089:  CALL   039
008A:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
008B:  MOVLW  28
008C:  MOVWF  25
008D:  MOVLW  0C
008E:  MOVWF  26
008F:  MOVLW  01
0090:  MOVWF  27
0091:  MOVLW  06
0092:  MOVWF  28
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0093:  BCF    08.0
....................    lcd_output_rs(0); 
0094:  BCF    08.1
....................    lcd_output_rw(0); 
0095:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0096:  MOVLW  0F
0097:  BSF    03.5
0098:  ANDWF  08,W
0099:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
009A:  BCF    08.0
....................    lcd_rs_tris(); 
009B:  BCF    08.1
....................    lcd_rw_tris(); 
009C:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
009D:  MOVLW  0F
009E:  BCF    03.5
009F:  MOVWF  29
00A0:  CALL   024
....................    for(i=1;i<=3;++i) 
00A1:  MOVLW  01
00A2:  MOVWF  24
00A3:  MOVF   24,W
00A4:  SUBLW  03
00A5:  BTFSS  03.0
00A6:  GOTO   0AF
....................    { 
....................        lcd_send_nibble(3); 
00A7:  MOVLW  03
00A8:  MOVWF  2F
00A9:  CALL   039
....................        delay_ms(5); 
00AA:  MOVLW  05
00AB:  MOVWF  29
00AC:  CALL   024
00AD:  INCF   24,F
00AE:  GOTO   0A3
....................    } 
....................     
....................    lcd_send_nibble(2); 
00AF:  MOVLW  02
00B0:  MOVWF  2F
00B1:  CALL   039
....................    delay_ms(5); 
00B2:  MOVLW  05
00B3:  MOVWF  29
00B4:  CALL   024
....................    for(i=0;i<=3;++i) 
00B5:  CLRF   24
00B6:  MOVF   24,W
00B7:  SUBLW  03
00B8:  BTFSS  03.0
00B9:  GOTO   0C6
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00BA:  MOVLW  25
00BB:  ADDWF  24,W
00BC:  MOVWF  04
00BD:  BCF    03.7
00BE:  MOVF   00,W
00BF:  MOVWF  29
00C0:  CLRF   2C
00C1:  MOVF   29,W
00C2:  MOVWF  2D
00C3:  CALL   04B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C4:  INCF   24,F
00C5:  GOTO   0B6
00C6:  BCF    0A.3
00C7:  BCF    0A.4
00C8:  GOTO   1A8 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C9:  DECFSZ 29,W
00CA:  GOTO   0CC
00CB:  GOTO   0CF
....................       address=LCD_LINE_TWO; 
00CC:  MOVLW  40
00CD:  MOVWF  2A
00CE:  GOTO   0D0
....................    else 
....................       address=0; 
00CF:  CLRF   2A
....................       
....................    address+=x-1; 
00D0:  MOVLW  01
00D1:  SUBWF  28,W
00D2:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
00D3:  MOVF   2A,W
00D4:  IORLW  80
00D5:  MOVWF  2B
00D6:  CLRF   2C
00D7:  MOVF   2B,W
00D8:  MOVWF  2D
00D9:  CALL   04B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DA:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00DB:  MOVF   27,W
00DC:  XORLW  07
00DD:  BTFSC  03.2
00DE:  GOTO   0E9
00DF:  XORLW  0B
00E0:  BTFSC  03.2
00E1:  GOTO   0EE
00E2:  XORLW  06
00E3:  BTFSC  03.2
00E4:  GOTO   0F6
00E5:  XORLW  02
00E6:  BTFSC  03.2
00E7:  GOTO   0FC
00E8:  GOTO   101
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E9:  MOVLW  01
00EA:  MOVWF  28
00EB:  MOVWF  29
00EC:  CALL   0C9
00ED:  GOTO   106
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00EE:  CLRF   2C
00EF:  MOVLW  01
00F0:  MOVWF  2D
00F1:  CALL   04B
....................                      delay_ms(2); 
00F2:  MOVLW  02
00F3:  MOVWF  29
00F4:  CALL   024
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F5:  GOTO   106
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00F6:  MOVLW  01
00F7:  MOVWF  28
00F8:  MOVLW  02
00F9:  MOVWF  29
00FA:  CALL   0C9
00FB:  GOTO   106
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00FC:  CLRF   2C
00FD:  MOVLW  10
00FE:  MOVWF  2D
00FF:  CALL   04B
0100:  GOTO   106
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0101:  MOVLW  01
0102:  MOVWF  2C
0103:  MOVF   27,W
0104:  MOVWF  2D
0105:  CALL   04B
....................      #endif 
....................    } 
0106:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... const char message[]={"Cristian Andres Calambas Santa"};//Vector Unidimensional 
....................  
.................... void main(void) 
*
018D:  MOVF   03,W
018E:  ANDLW  1F
018F:  MOVWF  03
0190:  CLRF   21
0191:  CLRF   20
0192:  BSF    03.5
0193:  BSF    03.6
0194:  MOVF   09,W
0195:  ANDLW  C0
0196:  MOVWF  09
0197:  BCF    03.6
0198:  BCF    1F.4
0199:  BCF    1F.5
019A:  MOVLW  00
019B:  BSF    03.6
019C:  MOVWF  08
019D:  BCF    03.5
019E:  CLRF   07
019F:  CLRF   08
01A0:  CLRF   09
01A1:  BCF    03.7
01A2:  MOVLW  01
01A3:  BCF    03.6
01A4:  MOVWF  22
01A5:  MOVLW  10
01A6:  MOVWF  23
.................... { 
....................    char y=1;//indice fila 
....................    signed char x=16;//indice columnas(posiciones) 
....................    lcd_init(); 
01A7:  GOTO   08B
....................     
....................    while(true) 
....................    {  
....................      lcd_gotoxy(x,y);//x=column  Y=fila 
01A8:  MOVF   23,W
01A9:  MOVWF  28
01AA:  MOVF   22,W
01AB:  MOVWF  29
01AC:  CALL   0C9
....................      lcd_putc(message); 
01AD:  MOVLW  04
01AE:  BSF    03.6
01AF:  MOVWF  0D
01B0:  MOVLW  00
01B1:  MOVWF  0F
01B2:  BCF    03.6
01B3:  GOTO   107
....................      delay_ms(100); 
01B4:  MOVLW  64
01B5:  MOVWF  29
01B6:  CALL   024
....................      x--; 
01B7:  DECF   23,F
....................      if(x<-30) 
01B8:  MOVF   23,W
01B9:  XORLW  80
01BA:  SUBLW  61
01BB:  BTFSS  03.0
01BC:  GOTO   1C6
....................      { 
....................       x=16; 
01BD:  MOVLW  10
01BE:  MOVWF  23
....................       y++; 
01BF:  INCF   22,F
....................       if(y>2) 
01C0:  MOVF   22,W
01C1:  SUBLW  02
01C2:  BTFSC  03.0
01C3:  GOTO   1C6
....................       { 
....................         y=1; 
01C4:  MOVLW  01
01C5:  MOVWF  22
....................       } 
....................      } 
....................      lcd_putc("\f");//Limpia pantalla 
01C6:  MOVLW  23
01C7:  BSF    03.6
01C8:  MOVWF  0D
01C9:  MOVLW  00
01CA:  MOVWF  0F
01CB:  BCF    03.6
01CC:  GOTO   135
01CD:  GOTO   1A8
....................    }//......Ciclo INFINITO 
.................... } 
01CE:  SLEEP

Configuration Fuses:
   Word  1: 2FF1   XT NOWDT NOPUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
